<#@ template language="C#" HostSpecific="True" #>
<#@ output extension="ascx" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Reflection" #>
<%@ Control Language="C#" Inherits="System.Web.Mvc.ViewUserControl" %>
<%@ Import Namespace="Signum.Web" %>
<%@ Import Namespace="Signum.Engine" %>
<%@ Import Namespace="Signum.Entities" %>
<%@ Import Namespace="Signum.Utilities" %>
<# Type entityType = ((MvcTextTemplateHost)(Host)).ViewDataType; #>
<%@ Import Namespace="<#= entityType.Namespace #>" %>

<%
using (var e = Html.TypeContext<<#= entityType.Name #>>()) 
{
<#
string[] commonProperties = {"Ticks","Id","ToStr","IsNew","SelfModified","ToStringMethod","Error","Item","Modified","AllowChange"};
PropertyInfo[] properties = entityType.GetProperties(BindingFlags.Instance | BindingFlags.Public);
foreach(PropertyInfo pi in properties) {
if (Array.IndexOf(commonProperties,pi.Name)>-1)
continue;
if (pi.PropertyType.IsValueType || pi.PropertyType == typeof(string)){
#>
	Html.ValueLine(e, f => f.<#= pi.Name #>);
<#} 
else if (typeof(IList).IsAssignableFrom(entityType)) {
#>
	Html.EntityList(e, f => f.<#= pi.Name #>);
<#}
else {
#>
	Html.EntityLine(e, f => f.<#= pi.Name #>);
<#}	
}#>
}
%>
