'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dtsGestionPagos"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dtsGestionPagos
    Inherits System.Data.DataSet
    
    Private tableEntidadesFiscales As EntidadesFiscalesDataTable
    
    Private tablePagosConCheque As PagosConChequeDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("EntidadesFiscales")) Is Nothing) Then
                MyBase.Tables.Add(New EntidadesFiscalesDataTable(ds.Tables("EntidadesFiscales")))
            End If
            If (Not (ds.Tables("PagosConCheque")) Is Nothing) Then
                MyBase.Tables.Add(New PagosConChequeDataTable(ds.Tables("PagosConCheque")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EntidadesFiscales() As EntidadesFiscalesDataTable
        Get
            Return Me.tableEntidadesFiscales
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PagosConCheque() As PagosConChequeDataTable
        Get
            Return Me.tablePagosConCheque
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dtsGestionPagos = CType(MyBase.Clone,dtsGestionPagos)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("EntidadesFiscales")) Is Nothing) Then
                MyBase.Tables.Add(New EntidadesFiscalesDataTable(ds.Tables("EntidadesFiscales")))
            End If
            If (Not (ds.Tables("PagosConCheque")) Is Nothing) Then
                MyBase.Tables.Add(New PagosConChequeDataTable(ds.Tables("PagosConCheque")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableEntidadesFiscales = CType(MyBase.Tables("EntidadesFiscales"),EntidadesFiscalesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEntidadesFiscales) Is Nothing) Then
                Me.tableEntidadesFiscales.InitVars
            End If
        End If
        Me.tablePagosConCheque = CType(MyBase.Tables("PagosConCheque"),PagosConChequeDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePagosConCheque) Is Nothing) Then
                Me.tablePagosConCheque.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dtsGestionPagos"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dtsGestionPagos.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableEntidadesFiscales = New EntidadesFiscalesDataTable
        MyBase.Tables.Add(Me.tableEntidadesFiscales)
        Me.tablePagosConCheque = New PagosConChequeDataTable
        MyBase.Tables.Add(Me.tablePagosConCheque)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEntidadesFiscales() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePagosConCheque() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dtsGestionPagos = New dtsGestionPagos
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub EntidadesFiscalesRowChangeEventHandler(ByVal sender As Object, ByVal e As EntidadesFiscalesRowChangeEvent)
    
    Public Delegate Sub PagosConChequeRowChangeEventHandler(ByVal sender As Object, ByVal e As PagosConChequeRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EntidadesFiscalesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCuentaContable As System.Data.DataColumn
        
        Private columnNombreEmpresa As System.Data.DataColumn
        
        Private columnDomicilio As System.Data.DataColumn
        
        Private columnidFiscal As System.Data.DataColumn
        
        Private columncodp As System.Data.DataColumn
        
        Private columnLocalidad As System.Data.DataColumn
        
        Private columnProvincia As System.Data.DataColumn
        
        Private columnTelefono As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EntidadesFiscales"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CuentaContableColumn() As System.Data.DataColumn
            Get
                Return Me.columnCuentaContable
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreEmpresaColumn() As System.Data.DataColumn
            Get
                Return Me.columnNombreEmpresa
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DomicilioColumn() As System.Data.DataColumn
            Get
                Return Me.columnDomicilio
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idFiscalColumn() As System.Data.DataColumn
            Get
                Return Me.columnidFiscal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codpColumn() As System.Data.DataColumn
            Get
                Return Me.columncodp
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocalidadColumn() As System.Data.DataColumn
            Get
                Return Me.columnLocalidad
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProvinciaColumn() As System.Data.DataColumn
            Get
                Return Me.columnProvincia
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefonoColumn() As System.Data.DataColumn
            Get
                Return Me.columnTelefono
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EntidadesFiscalesRow
            Get
                Return CType(Me.Rows(index),EntidadesFiscalesRow)
            End Get
        End Property
        
        Public Event EntidadesFiscalesRowChanging As EntidadesFiscalesRowChangeEventHandler
        
        Public Event EntidadesFiscalesRowChanged As EntidadesFiscalesRowChangeEventHandler
        
        Public Event EntidadesFiscalesRowDeleting As EntidadesFiscalesRowChangeEventHandler
        
        Public Event EntidadesFiscalesRowDeleted As EntidadesFiscalesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEntidadesFiscalesRow(ByVal row As EntidadesFiscalesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEntidadesFiscalesRow(ByVal CuentaContable As String, ByVal NombreEmpresa As String, ByVal Domicilio As String, ByVal idFiscal As String, ByVal codp As String, ByVal Localidad As String, ByVal Provincia As String, ByVal Telefono As String) As EntidadesFiscalesRow
            Dim rowEntidadesFiscalesRow As EntidadesFiscalesRow = CType(Me.NewRow,EntidadesFiscalesRow)
            rowEntidadesFiscalesRow.ItemArray = New Object() {CuentaContable, NombreEmpresa, Domicilio, idFiscal, codp, Localidad, Provincia, Telefono}
            Me.Rows.Add(rowEntidadesFiscalesRow)
            Return rowEntidadesFiscalesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As EntidadesFiscalesDataTable = CType(MyBase.Clone,EntidadesFiscalesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New EntidadesFiscalesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCuentaContable = MyBase.Columns("CuentaContable")
            Me.columnNombreEmpresa = MyBase.Columns("NombreEmpresa")
            Me.columnDomicilio = MyBase.Columns("Domicilio")
            Me.columnidFiscal = MyBase.Columns("idFiscal")
            Me.columncodp = MyBase.Columns("Codp")
            Me.columnLocalidad = MyBase.Columns("Localidad")
            Me.columnProvincia = MyBase.Columns("Provincia")
            Me.columnTelefono = MyBase.Columns("Telefono")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCuentaContable = New System.Data.DataColumn("CuentaContable", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCuentaContable)
            Me.columnNombreEmpresa = New System.Data.DataColumn("NombreEmpresa", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreEmpresa)
            Me.columnDomicilio = New System.Data.DataColumn("Domicilio", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDomicilio)
            Me.columnidFiscal = New System.Data.DataColumn("idFiscal", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidFiscal)
            Me.columncodp = New System.Data.DataColumn("Codp", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columncodp.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "codp")
            Me.columncodp.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "codpColumn")
            Me.columncodp.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columncodp")
            Me.columncodp.ExtendedProperties.Add("Generator_UserColumnName", "Codp")
            MyBase.Columns.Add(Me.columncodp)
            Me.columnLocalidad = New System.Data.DataColumn("Localidad", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocalidad)
            Me.columnProvincia = New System.Data.DataColumn("Provincia", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProvincia)
            Me.columnTelefono = New System.Data.DataColumn("Telefono", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEntidadesFiscalesRow() As EntidadesFiscalesRow
            Return CType(Me.NewRow,EntidadesFiscalesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New EntidadesFiscalesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(EntidadesFiscalesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EntidadesFiscalesRowChangedEvent) Is Nothing) Then
                RaiseEvent EntidadesFiscalesRowChanged(Me, New EntidadesFiscalesRowChangeEvent(CType(e.Row,EntidadesFiscalesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EntidadesFiscalesRowChangingEvent) Is Nothing) Then
                RaiseEvent EntidadesFiscalesRowChanging(Me, New EntidadesFiscalesRowChangeEvent(CType(e.Row,EntidadesFiscalesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EntidadesFiscalesRowDeletedEvent) Is Nothing) Then
                RaiseEvent EntidadesFiscalesRowDeleted(Me, New EntidadesFiscalesRowChangeEvent(CType(e.Row,EntidadesFiscalesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EntidadesFiscalesRowDeletingEvent) Is Nothing) Then
                RaiseEvent EntidadesFiscalesRowDeleting(Me, New EntidadesFiscalesRowChangeEvent(CType(e.Row,EntidadesFiscalesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEntidadesFiscalesRow(ByVal row As EntidadesFiscalesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsGestionPagos = New dtsGestionPagos
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EntidadesFiscalesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PagosConChequeDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodSiniestro As System.Data.DataColumn
        
        Private columnImporte As System.Data.DataColumn
        
        Private columnCifBeneficiario As System.Data.DataColumn
        
        Private columnNombreBeneficiario As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PagosConCheque"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodSiniestroColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodSiniestro
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImporteColumn() As System.Data.DataColumn
            Get
                Return Me.columnImporte
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CifBeneficiarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnCifBeneficiario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreBeneficiarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnNombreBeneficiario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PagosConChequeRow
            Get
                Return CType(Me.Rows(index),PagosConChequeRow)
            End Get
        End Property
        
        Public Event PagosConChequeRowChanging As PagosConChequeRowChangeEventHandler
        
        Public Event PagosConChequeRowChanged As PagosConChequeRowChangeEventHandler
        
        Public Event PagosConChequeRowDeleting As PagosConChequeRowChangeEventHandler
        
        Public Event PagosConChequeRowDeleted As PagosConChequeRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPagosConChequeRow(ByVal row As PagosConChequeRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPagosConChequeRow(ByVal CodSiniestro As String, ByVal Importe As String, ByVal CifBeneficiario As String, ByVal NombreBeneficiario As String) As PagosConChequeRow
            Dim rowPagosConChequeRow As PagosConChequeRow = CType(Me.NewRow,PagosConChequeRow)
            rowPagosConChequeRow.ItemArray = New Object() {CodSiniestro, Importe, CifBeneficiario, NombreBeneficiario}
            Me.Rows.Add(rowPagosConChequeRow)
            Return rowPagosConChequeRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PagosConChequeDataTable = CType(MyBase.Clone,PagosConChequeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PagosConChequeDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodSiniestro = MyBase.Columns("CodSiniestro")
            Me.columnImporte = MyBase.Columns("Importe")
            Me.columnCifBeneficiario = MyBase.Columns("CifBeneficiario")
            Me.columnNombreBeneficiario = MyBase.Columns("NombreBeneficiario")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodSiniestro = New System.Data.DataColumn("CodSiniestro", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodSiniestro)
            Me.columnImporte = New System.Data.DataColumn("Importe", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImporte)
            Me.columnCifBeneficiario = New System.Data.DataColumn("CifBeneficiario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCifBeneficiario)
            Me.columnNombreBeneficiario = New System.Data.DataColumn("NombreBeneficiario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreBeneficiario)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPagosConChequeRow() As PagosConChequeRow
            Return CType(Me.NewRow,PagosConChequeRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PagosConChequeRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PagosConChequeRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PagosConChequeRowChangedEvent) Is Nothing) Then
                RaiseEvent PagosConChequeRowChanged(Me, New PagosConChequeRowChangeEvent(CType(e.Row,PagosConChequeRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PagosConChequeRowChangingEvent) Is Nothing) Then
                RaiseEvent PagosConChequeRowChanging(Me, New PagosConChequeRowChangeEvent(CType(e.Row,PagosConChequeRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PagosConChequeRowDeletedEvent) Is Nothing) Then
                RaiseEvent PagosConChequeRowDeleted(Me, New PagosConChequeRowChangeEvent(CType(e.Row,PagosConChequeRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PagosConChequeRowDeletingEvent) Is Nothing) Then
                RaiseEvent PagosConChequeRowDeleting(Me, New PagosConChequeRowChangeEvent(CType(e.Row,PagosConChequeRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePagosConChequeRow(ByVal row As PagosConChequeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtsGestionPagos = New dtsGestionPagos
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PagosConChequeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EntidadesFiscalesRow
        Inherits System.Data.DataRow
        
        Private tableEntidadesFiscales As EntidadesFiscalesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEntidadesFiscales = CType(Me.Table,EntidadesFiscalesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CuentaContable() As String
            Get
                If Me.IsCuentaContableNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableEntidadesFiscales.CuentaContableColumn),String)
                End If
            End Get
            Set
                Me(Me.tableEntidadesFiscales.CuentaContableColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreEmpresa() As String
            Get
                If Me.IsNombreEmpresaNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableEntidadesFiscales.NombreEmpresaColumn),String)
                End If
            End Get
            Set
                Me(Me.tableEntidadesFiscales.NombreEmpresaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Domicilio() As String
            Get
                If Me.IsDomicilioNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableEntidadesFiscales.DomicilioColumn),String)
                End If
            End Get
            Set
                Me(Me.tableEntidadesFiscales.DomicilioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idFiscal() As String
            Get
                If Me.IsidFiscalNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableEntidadesFiscales.idFiscalColumn),String)
                End If
            End Get
            Set
                Me(Me.tableEntidadesFiscales.idFiscalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codp() As String
            Get
                If Me.IscodpNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableEntidadesFiscales.codpColumn),String)
                End If
            End Get
            Set
                Me(Me.tableEntidadesFiscales.codpColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Localidad() As String
            Get
                If Me.IsLocalidadNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableEntidadesFiscales.LocalidadColumn),String)
                End If
            End Get
            Set
                Me(Me.tableEntidadesFiscales.LocalidadColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Provincia() As String
            Get
                If Me.IsProvinciaNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableEntidadesFiscales.ProvinciaColumn),String)
                End If
            End Get
            Set
                Me(Me.tableEntidadesFiscales.ProvinciaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono() As String
            Get
                If Me.IsTelefonoNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableEntidadesFiscales.TelefonoColumn),String)
                End If
            End Get
            Set
                Me(Me.tableEntidadesFiscales.TelefonoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCuentaContableNull() As Boolean
            Return Me.IsNull(Me.tableEntidadesFiscales.CuentaContableColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCuentaContableNull()
            Me(Me.tableEntidadesFiscales.CuentaContableColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreEmpresaNull() As Boolean
            Return Me.IsNull(Me.tableEntidadesFiscales.NombreEmpresaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreEmpresaNull()
            Me(Me.tableEntidadesFiscales.NombreEmpresaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDomicilioNull() As Boolean
            Return Me.IsNull(Me.tableEntidadesFiscales.DomicilioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDomicilioNull()
            Me(Me.tableEntidadesFiscales.DomicilioColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidFiscalNull() As Boolean
            Return Me.IsNull(Me.tableEntidadesFiscales.idFiscalColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidFiscalNull()
            Me(Me.tableEntidadesFiscales.idFiscalColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodpNull() As Boolean
            Return Me.IsNull(Me.tableEntidadesFiscales.codpColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodpNull()
            Me(Me.tableEntidadesFiscales.codpColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocalidadNull() As Boolean
            Return Me.IsNull(Me.tableEntidadesFiscales.LocalidadColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocalidadNull()
            Me(Me.tableEntidadesFiscales.LocalidadColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProvinciaNull() As Boolean
            Return Me.IsNull(Me.tableEntidadesFiscales.ProvinciaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProvinciaNull()
            Me(Me.tableEntidadesFiscales.ProvinciaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefonoNull() As Boolean
            Return Me.IsNull(Me.tableEntidadesFiscales.TelefonoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefonoNull()
            Me(Me.tableEntidadesFiscales.TelefonoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PagosConChequeRow
        Inherits System.Data.DataRow
        
        Private tablePagosConCheque As PagosConChequeDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePagosConCheque = CType(Me.Table,PagosConChequeDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodSiniestro() As String
            Get
                If Me.IsCodSiniestroNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tablePagosConCheque.CodSiniestroColumn),String)
                End If
            End Get
            Set
                Me(Me.tablePagosConCheque.CodSiniestroColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Importe() As String
            Get
                If Me.IsImporteNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tablePagosConCheque.ImporteColumn),String)
                End If
            End Get
            Set
                Me(Me.tablePagosConCheque.ImporteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CifBeneficiario() As String
            Get
                If Me.IsCifBeneficiarioNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tablePagosConCheque.CifBeneficiarioColumn),String)
                End If
            End Get
            Set
                Me(Me.tablePagosConCheque.CifBeneficiarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreBeneficiario() As String
            Get
                If Me.IsNombreBeneficiarioNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tablePagosConCheque.NombreBeneficiarioColumn),String)
                End If
            End Get
            Set
                Me(Me.tablePagosConCheque.NombreBeneficiarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodSiniestroNull() As Boolean
            Return Me.IsNull(Me.tablePagosConCheque.CodSiniestroColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodSiniestroNull()
            Me(Me.tablePagosConCheque.CodSiniestroColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImporteNull() As Boolean
            Return Me.IsNull(Me.tablePagosConCheque.ImporteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImporteNull()
            Me(Me.tablePagosConCheque.ImporteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCifBeneficiarioNull() As Boolean
            Return Me.IsNull(Me.tablePagosConCheque.CifBeneficiarioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCifBeneficiarioNull()
            Me(Me.tablePagosConCheque.CifBeneficiarioColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreBeneficiarioNull() As Boolean
            Return Me.IsNull(Me.tablePagosConCheque.NombreBeneficiarioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreBeneficiarioNull()
            Me(Me.tablePagosConCheque.NombreBeneficiarioColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EntidadesFiscalesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As EntidadesFiscalesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EntidadesFiscalesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EntidadesFiscalesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PagosConChequeRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PagosConChequeRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PagosConChequeRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PagosConChequeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
