'The following code was generated by Microsoft Visual Studio 2005.
'The test owner should check each test for validity.
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports System
Imports System.Text
Imports System.Collections.Generic
Imports FN.RiesgosVehiculos.DN


'''<summary>
'''This is a test class for FN.RiesgosVehiculos.DN.MatriculaDN and is intended
'''to contain all FN.RiesgosVehiculos.DN.MatriculaDN Unit Tests
'''</summary>
<TestClass()> _
Public Class MatriculaDNTest


    Private testContextInstance As TestContext

    '''<summary>
    '''Gets or sets the test context which provides
    '''information about and functionality for the current test run.
    '''</summary>
    Public Property TestContext() As TestContext
        Get
            Return testContextInstance
        End Get
        Set(ByVal value As TestContext)
            testContextInstance = value
        End Set
    End Property
#Region "Additional test attributes"
    '
    'You can use the following additional attributes as you write your tests:
    '
    'Use ClassInitialize to run code before running the first test in the class
    '
    '<ClassInitialize()>  _
    'Public Shared Sub MyClassInitialize(ByVal testContext As TestContext)
    'End Sub
    '
    'Use ClassCleanup to run code after all tests in a class have run
    '
    '<ClassCleanup()>  _
    'Public Shared Sub MyClassCleanup()
    'End Sub
    '
    'Use TestInitialize to run code before running each test
    '
    '<TestInitialize()>  _
    'Public Sub MyTestInitialize()
    'End Sub
    '
    'Use TestCleanup to run code after each test has run
    '
    '<TestCleanup()>  _
    'Public Sub MyTestCleanup()
    'End Sub
    '
#End Region


    '''<summary>
    '''A test for ComprobarMatriculaxTipo(ByVal String, ByVal FN.RiesgosVehiculos.DN.TipoMatricula)
    '''</summary>
    <TestMethod()> _
    Public Sub ComprobarMatriculaxTipoTest()
        Dim target As MatriculaDN = New MatriculaDN()
        Dim matricula As String = ""
        Dim tipoMatricula As TipoMatricula

        Dim expected As Boolean
        Dim actual As Boolean

        'Caso: Ciclomotor correcto
        matricula = "c7865gtr"
        tipoMatricula = FN.RiesgosVehiculos.DN.TipoMatricula.CiclomotoresTMC
        expected = True

        actual = target.ComprobarMatriculaxTipo(matricula, tipoMatricula)
        Assert.AreEqual(expected, actual, "FN.RiesgosVehiculos.DN.MatriculaDN.ComprobarMatriculaxTipo did not return the exp" & _
                "ected value.")
        'Assert.Inconclusive("Verify the correctness of this test method.")

        'Caso: Ciclomotor normal
        matricula = "7865dfr"
        tipoMatricula = FN.RiesgosVehiculos.DN.TipoMatricula.NormalTM
        expected = True

        actual = target.ComprobarMatriculaxTipo(matricula, tipoMatricula)
        Assert.AreEqual(expected, actual, "FN.RiesgosVehiculos.DN.MatriculaDN.ComprobarMatriculaxTipo did not return the exp" & _
                "ected value.")

        matricula = "m7865xy"

        actual = target.ComprobarMatriculaxTipo(matricula, tipoMatricula)
        Assert.AreEqual(expected, actual, "FN.RiesgosVehiculos.DN.MatriculaDN.ComprobarMatriculaxTipo did not return the exp" & _
                "ected value.")

        matricula = "m786565"

        actual = target.ComprobarMatriculaxTipo(matricula, tipoMatricula)
        Assert.AreEqual(expected, actual, "FN.RiesgosVehiculos.DN.MatriculaDN.ComprobarMatriculaxTipo did not return the exp" & _
                "ected value.")

        matricula = "se78656b"

        actual = target.ComprobarMatriculaxTipo(matricula, tipoMatricula)
        Assert.AreEqual(expected, actual, "FN.RiesgosVehiculos.DN.MatriculaDN.ComprobarMatriculaxTipo did not return the exp" & _
                "ected value.")



    End Sub

End Class
