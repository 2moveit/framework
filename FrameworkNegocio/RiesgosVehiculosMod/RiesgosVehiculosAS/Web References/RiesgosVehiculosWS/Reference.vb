'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.312
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.312.
'
Namespace RiesgosVehiculosWS
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="RiesgosVehiculosWSSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class RiesgosVehiculosWS
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private CargarGrafoTarificacionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DesCargarGrafoTarificacionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RecuperarRiesgoMotorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RecuperarModelosPorMarcaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExisteModeloDatosOperationCompleted As System.Threading.SendOrPostCallback
        
        Private VerificarDatosPresupuestoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TarificarPresupuestoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TarificarTarifaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ModificarPolizaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RecuperarModeloDatosOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RecuperarProductosModeloOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.FN.RiesgosVehiculos.[AS].My.MySettings.Default.RiesgosVehiculosAS_RiesgosVehiculosWS_RiesgosVehiculosWS
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event CargarGrafoTarificacionCompleted As CargarGrafoTarificacionCompletedEventHandler
        
        '''<remarks/>
        Public Event DesCargarGrafoTarificacionCompleted As DesCargarGrafoTarificacionCompletedEventHandler
        
        '''<remarks/>
        Public Event RecuperarRiesgoMotorCompleted As RecuperarRiesgoMotorCompletedEventHandler
        
        '''<remarks/>
        Public Event RecuperarModelosPorMarcaCompleted As RecuperarModelosPorMarcaCompletedEventHandler
        
        '''<remarks/>
        Public Event ExisteModeloDatosCompleted As ExisteModeloDatosCompletedEventHandler
        
        '''<remarks/>
        Public Event VerificarDatosPresupuestoCompleted As VerificarDatosPresupuestoCompletedEventHandler
        
        '''<remarks/>
        Public Event TarificarPresupuestoCompleted As TarificarPresupuestoCompletedEventHandler
        
        '''<remarks/>
        Public Event TarificarTarifaCompleted As TarificarTarifaCompletedEventHandler
        
        '''<remarks/>
        Public Event ModificarPolizaCompleted As ModificarPolizaCompletedEventHandler
        
        '''<remarks/>
        Public Event RecuperarModeloDatosCompleted As RecuperarModeloDatosCompletedEventHandler
        
        '''<remarks/>
        Public Event RecuperarProductosModeloCompleted As RecuperarProductosModeloCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CargarGrafoTarificacion", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CargarGrafoTarificacion()
            Me.Invoke("CargarGrafoTarificacion", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CargarGrafoTarificacionAsync()
            Me.CargarGrafoTarificacionAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CargarGrafoTarificacionAsync(ByVal userState As Object)
            If (Me.CargarGrafoTarificacionOperationCompleted Is Nothing) Then
                Me.CargarGrafoTarificacionOperationCompleted = AddressOf Me.OnCargarGrafoTarificacionOperationCompleted
            End If
            Me.InvokeAsync("CargarGrafoTarificacion", New Object(-1) {}, Me.CargarGrafoTarificacionOperationCompleted, userState)
        End Sub
        
        Private Sub OnCargarGrafoTarificacionOperationCompleted(ByVal arg As Object)
            If (Not (Me.CargarGrafoTarificacionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CargarGrafoTarificacionCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DesCargarGrafoTarificacion", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DesCargarGrafoTarificacion()
            Me.Invoke("DesCargarGrafoTarificacion", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DesCargarGrafoTarificacionAsync()
            Me.DesCargarGrafoTarificacionAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DesCargarGrafoTarificacionAsync(ByVal userState As Object)
            If (Me.DesCargarGrafoTarificacionOperationCompleted Is Nothing) Then
                Me.DesCargarGrafoTarificacionOperationCompleted = AddressOf Me.OnDesCargarGrafoTarificacionOperationCompleted
            End If
            Me.InvokeAsync("DesCargarGrafoTarificacion", New Object(-1) {}, Me.DesCargarGrafoTarificacionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDesCargarGrafoTarificacionOperationCompleted(ByVal arg As Object)
            If (Not (Me.DesCargarGrafoTarificacionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DesCargarGrafoTarificacionCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RecuperarRiesgoMotor", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RecuperarRiesgoMotor(ByVal pMatricula As String, ByVal pNumeroBastidor As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("RecuperarRiesgoMotor", New Object() {pMatricula, pNumeroBastidor})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub RecuperarRiesgoMotorAsync(ByVal pMatricula As String, ByVal pNumeroBastidor As String)
            Me.RecuperarRiesgoMotorAsync(pMatricula, pNumeroBastidor, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RecuperarRiesgoMotorAsync(ByVal pMatricula As String, ByVal pNumeroBastidor As String, ByVal userState As Object)
            If (Me.RecuperarRiesgoMotorOperationCompleted Is Nothing) Then
                Me.RecuperarRiesgoMotorOperationCompleted = AddressOf Me.OnRecuperarRiesgoMotorOperationCompleted
            End If
            Me.InvokeAsync("RecuperarRiesgoMotor", New Object() {pMatricula, pNumeroBastidor}, Me.RecuperarRiesgoMotorOperationCompleted, userState)
        End Sub
        
        Private Sub OnRecuperarRiesgoMotorOperationCompleted(ByVal arg As Object)
            If (Not (Me.RecuperarRiesgoMotorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RecuperarRiesgoMotorCompleted(Me, New RecuperarRiesgoMotorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RecuperarModelosPorMarca", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RecuperarModelosPorMarca(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal pMarca() As Byte) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("RecuperarModelosPorMarca", New Object() {pMarca})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub RecuperarModelosPorMarcaAsync(ByVal pMarca() As Byte)
            Me.RecuperarModelosPorMarcaAsync(pMarca, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RecuperarModelosPorMarcaAsync(ByVal pMarca() As Byte, ByVal userState As Object)
            If (Me.RecuperarModelosPorMarcaOperationCompleted Is Nothing) Then
                Me.RecuperarModelosPorMarcaOperationCompleted = AddressOf Me.OnRecuperarModelosPorMarcaOperationCompleted
            End If
            Me.InvokeAsync("RecuperarModelosPorMarca", New Object() {pMarca}, Me.RecuperarModelosPorMarcaOperationCompleted, userState)
        End Sub
        
        Private Sub OnRecuperarModelosPorMarcaOperationCompleted(ByVal arg As Object)
            If (Not (Me.RecuperarModelosPorMarcaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RecuperarModelosPorMarcaCompleted(Me, New RecuperarModelosPorMarcaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExisteModeloDatos", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExisteModeloDatos(ByVal nombreModelo As String, ByVal nombreMarca As String, ByVal estadoMatriculacion As Boolean, ByVal fecha As Date) As Boolean
            Dim results() As Object = Me.Invoke("ExisteModeloDatos", New Object() {nombreModelo, nombreMarca, estadoMatriculacion, fecha})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExisteModeloDatosAsync(ByVal nombreModelo As String, ByVal nombreMarca As String, ByVal estadoMatriculacion As Boolean, ByVal fecha As Date)
            Me.ExisteModeloDatosAsync(nombreModelo, nombreMarca, estadoMatriculacion, fecha, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExisteModeloDatosAsync(ByVal nombreModelo As String, ByVal nombreMarca As String, ByVal estadoMatriculacion As Boolean, ByVal fecha As Date, ByVal userState As Object)
            If (Me.ExisteModeloDatosOperationCompleted Is Nothing) Then
                Me.ExisteModeloDatosOperationCompleted = AddressOf Me.OnExisteModeloDatosOperationCompleted
            End If
            Me.InvokeAsync("ExisteModeloDatos", New Object() {nombreModelo, nombreMarca, estadoMatriculacion, fecha}, Me.ExisteModeloDatosOperationCompleted, userState)
        End Sub
        
        Private Sub OnExisteModeloDatosOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExisteModeloDatosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExisteModeloDatosCompleted(Me, New ExisteModeloDatosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VerificarDatosPresupuesto", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function VerificarDatosPresupuesto(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal presupuesto() As Byte) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("VerificarDatosPresupuesto", New Object() {presupuesto})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub VerificarDatosPresupuestoAsync(ByVal presupuesto() As Byte)
            Me.VerificarDatosPresupuestoAsync(presupuesto, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub VerificarDatosPresupuestoAsync(ByVal presupuesto() As Byte, ByVal userState As Object)
            If (Me.VerificarDatosPresupuestoOperationCompleted Is Nothing) Then
                Me.VerificarDatosPresupuestoOperationCompleted = AddressOf Me.OnVerificarDatosPresupuestoOperationCompleted
            End If
            Me.InvokeAsync("VerificarDatosPresupuesto", New Object() {presupuesto}, Me.VerificarDatosPresupuestoOperationCompleted, userState)
        End Sub
        
        Private Sub OnVerificarDatosPresupuestoOperationCompleted(ByVal arg As Object)
            If (Not (Me.VerificarDatosPresupuestoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent VerificarDatosPresupuestoCompleted(Me, New VerificarDatosPresupuestoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TarificarPresupuesto", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TarificarPresupuesto(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal presupuesto() As Byte) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("TarificarPresupuesto", New Object() {presupuesto})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub TarificarPresupuestoAsync(ByVal presupuesto() As Byte)
            Me.TarificarPresupuestoAsync(presupuesto, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TarificarPresupuestoAsync(ByVal presupuesto() As Byte, ByVal userState As Object)
            If (Me.TarificarPresupuestoOperationCompleted Is Nothing) Then
                Me.TarificarPresupuestoOperationCompleted = AddressOf Me.OnTarificarPresupuestoOperationCompleted
            End If
            Me.InvokeAsync("TarificarPresupuesto", New Object() {presupuesto}, Me.TarificarPresupuestoOperationCompleted, userState)
        End Sub
        
        Private Sub OnTarificarPresupuestoOperationCompleted(ByVal arg As Object)
            If (Not (Me.TarificarPresupuestoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TarificarPresupuestoCompleted(Me, New TarificarPresupuestoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TarificarTarifa", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TarificarTarifa(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal pTarifa() As Byte) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("TarificarTarifa", New Object() {pTarifa})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub TarificarTarifaAsync(ByVal pTarifa() As Byte)
            Me.TarificarTarifaAsync(pTarifa, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TarificarTarifaAsync(ByVal pTarifa() As Byte, ByVal userState As Object)
            If (Me.TarificarTarifaOperationCompleted Is Nothing) Then
                Me.TarificarTarifaOperationCompleted = AddressOf Me.OnTarificarTarifaOperationCompleted
            End If
            Me.InvokeAsync("TarificarTarifa", New Object() {pTarifa}, Me.TarificarTarifaOperationCompleted, userState)
        End Sub
        
        Private Sub OnTarificarTarifaOperationCompleted(ByVal arg As Object)
            If (Not (Me.TarificarTarifaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TarificarTarifaCompleted(Me, New TarificarTarifaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ModificarPoliza", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ModificarPoliza(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal periodoR() As Byte, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal tarifa() As Byte, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal cuestionarioR() As Byte, ByVal fechaInicioPC As Date)
            Me.Invoke("ModificarPoliza", New Object() {periodoR, tarifa, cuestionarioR, fechaInicioPC})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ModificarPolizaAsync(ByVal periodoR() As Byte, ByVal tarifa() As Byte, ByVal cuestionarioR() As Byte, ByVal fechaInicioPC As Date)
            Me.ModificarPolizaAsync(periodoR, tarifa, cuestionarioR, fechaInicioPC, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ModificarPolizaAsync(ByVal periodoR() As Byte, ByVal tarifa() As Byte, ByVal cuestionarioR() As Byte, ByVal fechaInicioPC As Date, ByVal userState As Object)
            If (Me.ModificarPolizaOperationCompleted Is Nothing) Then
                Me.ModificarPolizaOperationCompleted = AddressOf Me.OnModificarPolizaOperationCompleted
            End If
            Me.InvokeAsync("ModificarPoliza", New Object() {periodoR, tarifa, cuestionarioR, fechaInicioPC}, Me.ModificarPolizaOperationCompleted, userState)
        End Sub
        
        Private Sub OnModificarPolizaOperationCompleted(ByVal arg As Object)
            If (Not (Me.ModificarPolizaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ModificarPolizaCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RecuperarModeloDatos", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RecuperarModeloDatos(ByVal nombreModelo As String, ByVal nombreMarca As String, ByVal matriculada As Boolean, ByVal fecha As Date) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("RecuperarModeloDatos", New Object() {nombreModelo, nombreMarca, matriculada, fecha})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub RecuperarModeloDatosAsync(ByVal nombreModelo As String, ByVal nombreMarca As String, ByVal matriculada As Boolean, ByVal fecha As Date)
            Me.RecuperarModeloDatosAsync(nombreModelo, nombreMarca, matriculada, fecha, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RecuperarModeloDatosAsync(ByVal nombreModelo As String, ByVal nombreMarca As String, ByVal matriculada As Boolean, ByVal fecha As Date, ByVal userState As Object)
            If (Me.RecuperarModeloDatosOperationCompleted Is Nothing) Then
                Me.RecuperarModeloDatosOperationCompleted = AddressOf Me.OnRecuperarModeloDatosOperationCompleted
            End If
            Me.InvokeAsync("RecuperarModeloDatos", New Object() {nombreModelo, nombreMarca, matriculada, fecha}, Me.RecuperarModeloDatosOperationCompleted, userState)
        End Sub
        
        Private Sub OnRecuperarModeloDatosOperationCompleted(ByVal arg As Object)
            If (Not (Me.RecuperarModeloDatosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RecuperarModeloDatosCompleted(Me, New RecuperarModeloDatosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RecuperarProductosModelo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RecuperarProductosModelo(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal modelo() As Byte, ByVal matriculada As Boolean, ByVal fecha As Date) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("RecuperarProductosModelo", New Object() {modelo, matriculada, fecha})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub RecuperarProductosModeloAsync(ByVal modelo() As Byte, ByVal matriculada As Boolean, ByVal fecha As Date)
            Me.RecuperarProductosModeloAsync(modelo, matriculada, fecha, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RecuperarProductosModeloAsync(ByVal modelo() As Byte, ByVal matriculada As Boolean, ByVal fecha As Date, ByVal userState As Object)
            If (Me.RecuperarProductosModeloOperationCompleted Is Nothing) Then
                Me.RecuperarProductosModeloOperationCompleted = AddressOf Me.OnRecuperarProductosModeloOperationCompleted
            End If
            Me.InvokeAsync("RecuperarProductosModelo", New Object() {modelo, matriculada, fecha}, Me.RecuperarProductosModeloOperationCompleted, userState)
        End Sub
        
        Private Sub OnRecuperarProductosModeloOperationCompleted(ByVal arg As Object)
            If (Not (Me.RecuperarProductosModeloCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RecuperarProductosModeloCompleted(Me, New RecuperarProductosModeloCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312")>  _
    Public Delegate Sub CargarGrafoTarificacionCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312")>  _
    Public Delegate Sub DesCargarGrafoTarificacionCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312")>  _
    Public Delegate Sub RecuperarRiesgoMotorCompletedEventHandler(ByVal sender As Object, ByVal e As RecuperarRiesgoMotorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RecuperarRiesgoMotorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312")>  _
    Public Delegate Sub RecuperarModelosPorMarcaCompletedEventHandler(ByVal sender As Object, ByVal e As RecuperarModelosPorMarcaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RecuperarModelosPorMarcaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312")>  _
    Public Delegate Sub ExisteModeloDatosCompletedEventHandler(ByVal sender As Object, ByVal e As ExisteModeloDatosCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExisteModeloDatosCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312")>  _
    Public Delegate Sub VerificarDatosPresupuestoCompletedEventHandler(ByVal sender As Object, ByVal e As VerificarDatosPresupuestoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class VerificarDatosPresupuestoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312")>  _
    Public Delegate Sub TarificarPresupuestoCompletedEventHandler(ByVal sender As Object, ByVal e As TarificarPresupuestoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TarificarPresupuestoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312")>  _
    Public Delegate Sub TarificarTarifaCompletedEventHandler(ByVal sender As Object, ByVal e As TarificarTarifaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TarificarTarifaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312")>  _
    Public Delegate Sub ModificarPolizaCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312")>  _
    Public Delegate Sub RecuperarModeloDatosCompletedEventHandler(ByVal sender As Object, ByVal e As RecuperarModeloDatosCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RecuperarModeloDatosCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312")>  _
    Public Delegate Sub RecuperarProductosModeloCompletedEventHandler(ByVal sender As Object, ByVal e As RecuperarProductosModeloCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.312"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RecuperarProductosModeloCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
End Namespace
