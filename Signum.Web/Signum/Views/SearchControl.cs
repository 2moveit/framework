//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using Signum.Utilities;
    using Signum.Entities;
    using Signum.Web;
    using System.Collections;
    using System.Collections.Specialized;
    using System.ComponentModel.DataAnnotations;
    using System.Configuration;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Web.Caching;
    using System.Web.DynamicData;
    using System.Web.SessionState;
    using System.Web.Profile;
    using System.Web.UI.WebControls;
    using System.Web.UI.WebControls.WebParts;
    using System.Web.UI.HtmlControls;
    using System.Xml.Linq;
    using Signum.Web.Properties;
    using Signum.Entities.DynamicQuery;
    using Signum.Engine.DynamicQuery;
    using Signum.Entities.Reflection;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MvcRazorClassGenerator", "1.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Signum/Views/SearchControl.cshtml")]
    public class _Page_Signum_Views_SearchControl_cshtml : System.Web.Mvc.WebViewPage<dynamic>
    {
#line hidden

        public _Page_Signum_Views_SearchControl_cshtml()
        {
        }
        protected System.Web.HttpApplication ApplicationInstance
        {
            get
            {
                return ((System.Web.HttpApplication)(Context.ApplicationInstance));
            }
        }
        public override void Execute()
        {





WriteLiteral("\r\n");


   Context context = (Context)Model;
   FindOptions findOptions = (FindOptions)ViewData[ViewDataKeys.FindOptions];
   QueryDescription queryDescription = (QueryDescription)ViewData[ViewDataKeys.QueryDescription];
   Type entitiesType = Reflector.ExtractLite(queryDescription.Columns.Single(a => a.IsEntity).Type);
   bool viewable = findOptions.View && Navigator.IsNavigable(entitiesType, true); 

WriteLiteral("<div id=\"");


    Write(context.Compose("divSearchControl"));

WriteLiteral("\" class=\"searchControl\">\r\n    ");


Write(Html.Hidden(context.Compose("sfWebQueryName"), Navigator.ResolveWebQueryName(findOptions.QueryName), new { disabled = "disabled" }));

WriteLiteral("\r\n    ");


Write(Html.Hidden(context.Compose(ViewDataKeys.AllowMultiple), findOptions.AllowMultiple.ToString(), new { disabled = "disabled" }));

WriteLiteral("\r\n    ");


Write(Html.Hidden(context.Compose(ViewDataKeys.View), viewable, new { disabled = "disabled" }));

WriteLiteral("\r\n    ");


Write(Html.Hidden(context.Compose(ViewDataKeys.EntityTypeName), Navigator.ResolveWebTypeName(entitiesType), new { disabled = "disabled" }));

WriteLiteral("\r\n");


     if (findOptions.EntityContextMenu)
    {

WriteLiteral("        <script type=\"text/javascript\">\r\n            var ");


           Write(context.Compose("EntityContextMenuUrl"));

WriteLiteral("  = \'");


                                                        Write(Url.SignumAction("GetContextualPanel"));

WriteLiteral("\';\r\n        </script>\r\n");


    }    

WriteLiteral("    <script type=\"text/javascript\">\r\n        var ");


       Write(context.Compose("QuickFilterUrl"));

WriteLiteral("  = \'");


                                              Write(Url.SignumAction("QuickFilter"));

WriteLiteral("\'; \r\n        var ");


       Write(context.Compose("SearchUrl"));

WriteLiteral(" = \'");


                                        Write(Url.SignumAction("Search"));

WriteLiteral("\';\r\n    </script>\r\n");


     if(findOptions.SearchOnLoad)
    {

WriteLiteral("        <script type=\"text/javascript\">\r\n            $(document).ready(function (" +
") { SearchOnLoad(\'");


                                                     Write(context.ControlID);

WriteLiteral("\'); });\r\n        </script>\r\n");


    }

WriteLiteral("    <div id=\"");


        Write(context.Compose("divFilters"));

WriteLiteral("\" style=\"display:");


                                                        Write((findOptions.FilterMode != FilterMode.AlwaysHidden && findOptions.FilterMode != FilterMode.OnlyResults) ? "block" : "none");

WriteLiteral("\" >\r\n");


           Html.RenderPartial(Navigator.Manager.FilterBuilderUrl, ViewData);

WriteLiteral("    </div>\r\n    <div class=\"search-footer\" style=\"display:");


                                          Write((findOptions.FilterMode != FilterMode.OnlyResults) ? "block" : "none");

WriteLiteral("\">\r\n        ");


   Write(Html.Label(null, Resources.NumberOfRows, context.Compose(ViewDataKeys.Top), null));

WriteLiteral("\r\n");


           int? top = findOptions.Top ?? Navigator.Manager.QuerySettings.GetOrThrow(findOptions.QueryName, "Missing QuerySettings for QueryName {0}").Top;

WriteLiteral("        ");


   Write(HtmlHelperExtenders.InputType("text", context.Compose(ViewDataKeys.Top), top.TryToString(), new Dictionary<string, object> { { "size", "5" }, { "onkeydown", "return validator.number(event)" } }));

WriteLiteral("\r\n        ");


   Write(Html.Hidden(context.Compose("OrderBy"), findOptions.OrderOptions == null ? "" :
                (findOptions.OrderOptions.ToString(oo => (oo.OrderType == OrderType.Ascending ? "" : "-") + oo.Token.FullKey(), ","))));

WriteLiteral("\r\n        <input class=\"btnSearch\" id=\"");


                                Write(context.Compose("btnSearch"));

WriteLiteral("\" type=\"button\" onclick=\"");


                                                                                       Write("Search({{prefix:'{0}',searchControllerUrl:'{1}'}});".Formato(context.ControlID, Url.SignumAction("Search")));

WriteLiteral("\" value=\"");


                                                                                                                                                                                                              Write(Resources.Search);

WriteLiteral("\" />\r\n");


         if (findOptions.Create && Navigator.IsCreable(entitiesType, true) && viewable)
        {

WriteLiteral("            <input type=\"button\" value=\"+\" class=\"lineButton create\" onclick=\"");


                                                                          Write(findOptions.Creating.HasText() ? findOptions.Creating : "SearchCreate({{prefix:'{0}',controllerUrl:'{1}'}});".Formato(context.ControlID, Url.SignumAction(string.IsNullOrEmpty(context.ControlID) ? "Create" : "PopupCreate")));

WriteLiteral("\" />\r\n");


        }

WriteLiteral("        <ul class=\"button-bar\">\r\n            ");


       Write(ButtonBarQueryHelper.GetButtonBarElementsForQuery(this.ViewContext, findOptions.QueryName, entitiesType, context.ControlID).ToString(Html));

WriteLiteral("\r\n        </ul>\r\n    </div>\r\n");


     if (findOptions.FilterMode != FilterMode.OnlyResults)
    {

WriteLiteral("        <div class=\"clearall\">\r\n        </div>\r\n");


    }

WriteLiteral("    <div id=\"");


        Write(context.Compose("divResults"));

WriteLiteral("\" class=\"divResults\">\r\n        <table id=\"");


              Write(context.Compose("tblResults"));

WriteLiteral("\" class=\"tblResults\">\r\n            <thead>\r\n                <tr>\r\n");


                     if (findOptions.AllowMultiple.HasValue)
                    {

WriteLiteral("                        <th class=\"thRowSelection\">\r\n");


                             if (findOptions.AllowMultiple.Value)
                            {
                                
                           Write(Html.CheckBox(context.Compose("cbSelectAll"), false, new { onclick = "javascript:ToggleSelectAll('{0}');".Formato(context.ControlID) }));

                                                                                                                                                                        
                            }

WriteLiteral("                        </th>\r\n");


                    }


                     if (viewable)
                    {

WriteLiteral("                        <th class=\"thRowEntity\">\r\n                        </th>\r\n" +
"");


                    }


                     foreach (var col in findOptions.MergeColumns())
                    {
                        var order = findOptions.OrderOptions.FirstOrDefault(oo => oo.Token.FullKey() == col.Name);
                        OrderType? orderType = null;
                        if (order != null)
                        {
                            orderType = order.OrderType;
                        }

WriteLiteral("                        <th class=\"");


                               Write((orderType == null) ? "" : (orderType == OrderType.Ascending ? "headerSortDown" : "headerSortUp"));

WriteLiteral("\">\r\n                            <input type=\"hidden\" value=\"");


                                                   Write(col.Name);

WriteLiteral("\" />\r\n                            ");


                       Write(col.DisplayName);

WriteLiteral("\r\n                        </th>\r\n");


                    }

WriteLiteral("                </tr>\r\n            </thead>\r\n            <tbody>\r\n            </t" +
"body>\r\n            <tfoot>\r\n            </tfoot>\r\n        </table>\r\n    </div>\r\n" +
"</div>\r\n<script type=\"text/javascript\">    \r\n    InitializeSearchControl(\"");


                        Write(context.ControlID);

WriteLiteral("\");\r\n</script>\r\n");


        }
    }
}
