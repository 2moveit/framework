@using Signum.Entities.Reflection
@{ TypeContext modelTC = (TypeContext)ViewData.Model;}
<div id="@modelTC.Compose("externalPopupDiv")">
    <div class="transparent popupBackground">
    </div>
    <div id="@modelTC.Compose("panelPopup")" class="popupWindow">
        @if (ViewData[ViewDataKeys.OnCancel] != null)
        {
            <div class="closebox" id="@modelTC.Compose(ViewDataKeys.BtnCancel)" onclick="@ViewData[ViewDataKeys.OnCancel]">
            </div>
        }
        else
        {
            <div class="closebox" id="@modelTC.Compose(ViewDataKeys.BtnCancel)">
            </div>
        }
        <div id="@modelTC.Compose("divPopupDragHandle")" class="dragHandle">
            @{ string pageTitle = (string)ViewData[ViewDataKeys.Title];}
            @if (pageTitle != null)
            {
                <span class="popupEntityName">@pageTitle</span>
            }
            else
            {
                <span class="popupEntityName">@modelTC.UntypedValue.GetType().NiceName()</span> <span
                    class="popupTitle">@modelTC.UntypedValue.TryToString()</span>
            }
        </div>
        <ul class="button-bar">
            @if (Model != null && Navigator.Manager.ShowOkSave(modelTC.UntypedValue.GetType(), false))
            {
                if (ViewData[ViewDataKeys.OnOk] != null)
                {
                <li>
                    <input type="button" id="@modelTC.Compose(ViewDataKeys.BtnOk)" value="OK" onclick="@ViewData[ViewDataKeys.OnOk]" /></li>
                }
                else
                {
                <li>
                    <input type="button" id="@modelTC.Compose(ViewDataKeys.BtnOk)" value="OK" /></li>
                }
            }
            @ButtonBarEntityHelper.GetForEntity(this.ViewContext, (ModifiableEntity)modelTC.UntypedValue, ViewData[ViewDataKeys.PartialViewName].ToString(), modelTC.ControlID).ToString(Html)
        </ul>
        @Html.ValidationSummaryAjax(modelTC)
        @Html.PopupHeader()
        <div id="@modelTC.Compose("divMainControl")" class="divMainControl">
            @{ Html.RenderPartial(ViewData[ViewDataKeys.PartialViewName].ToString(), (object)Model);}
        </div>
    </div>
</div>
@Html.DynamicJs("~/signum/Scripts/SF_DragAndDrop.js").Callback(@"function () {{
     SF.DragAndDrop(document.getElementById(""{0}""), document.getElementById(""{1}""));}}"
                .Formato(modelTC.Compose("divPopupDragHandle"), modelTC.Compose("panelPopup")))
