//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using Signum.Utilities;
    using Signum.Entities;
    using Signum.Web;
    using System.Collections;
    using System.Collections.Specialized;
    using System.ComponentModel.DataAnnotations;
    using System.Configuration;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Web.Caching;
    using System.Web.DynamicData;
    using System.Web.SessionState;
    using System.Web.Profile;
    using System.Web.UI.WebControls;
    using System.Web.UI.WebControls.WebParts;
    using System.Web.UI.HtmlControls;
    using System.Xml.Linq;
    using Signum.Entities.DynamicQuery;
    using Signum.Entities.Reflection;
    using Signum.Engine.DynamicQuery;
    using Signum.Web.Properties;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MvcRazorClassGenerator", "1.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Signum/Views/FilterBuilder.cshtml")]
    public class _Page_Signum_Views_FilterBuilder_cshtml : System.Web.Mvc.WebViewPage<dynamic>
    {
#line hidden

        public _Page_Signum_Views_FilterBuilder_cshtml()
        {
        }
        protected System.Web.HttpApplication ApplicationInstance
        {
            get
            {
                return ((System.Web.HttpApplication)(Context.ApplicationInstance));
            }
        }
        public override void Execute()
        {




WriteLiteral("\r\n");


   bool visible = ((FindOptions)ViewData[ViewDataKeys.FindOptions]).FilterMode == FilterMode.Visible;
   Context context = (Context)Model;
   FindOptions findOptions = (FindOptions)ViewData[ViewDataKeys.FindOptions];
   QueryDescription queryDescription = (QueryDescription)ViewData[ViewDataKeys.QueryDescription];

WriteLiteral("\r\n<div id=\"");


    Write(context.Compose("fields-search"));

WriteLiteral("\">\r\n    <div id=\"");


        Write(context.Compose("fields-list"));

WriteLiteral("\" class=\"sf-fields-list\">\r\n        <a onclick=\"SF.FindNavigator.toggleFilters(thi" +
"s)\" class=\"sf-filters-header");


                                                                              Write(visible ? "" : " close");

WriteLiteral("\" rev=\"sf-filters-body\">");


                                                                                                                                Write(visible ? Resources.HideFilters : Resources.ShowFilters);

WriteLiteral("</a>\r\n        <div class=\"sf-filters\" ");


                            Write(visible ? "" : "style=display:none");

WriteLiteral(">\r\n            <div id=\"");


                Write(context.Compose("filters-body"));

WriteLiteral("\" class=\"sf-filters-body\">\r\n");


                   var columns = queryDescription.Columns
                        .Select(c => new SelectListItem { Text = c.DisplayName, Value = c.Name, Selected = false })
                        .ToList();
                   columns.Insert(0, new SelectListItem { Text = "-", Selected = true, Value = "" });

WriteLiteral("                \r\n                ");


           Write(Html.TokensCombo(findOptions.QueryName, columns, context, 0, false));

WriteLiteral("\r\n                \r\n                ");


           Write(Html.Href(
                        context.Compose("btnAddFilter"), 
                        Resources.FilterBuilder_AddFilter, 
                        "",
                        Resources.FilterBuilder_AddFilter,
                        "sf-query-button sf-add-filter", 
                        new Dictionary<string, object> 
                        { 
                            { "onclick", "new SF.FindNavigator({{prefix:'{0}'}}).addFilter('{1}');".Formato(context.ControlID, Url.SignumAction("AddFilter")) },
                            { "data-icon", "ui-icon-arrowthick-1-s" }
                        }));

WriteLiteral("\r\n\r\n");


                 if (findOptions.AllowUserColumns.HasValue ? findOptions.AllowUserColumns.Value : Navigator.Manager.AllowUserColumns(context.ControlID))
                {
                    
               Write(Html.Href(
                        context.Compose("btnAddColumn"), 
                        Resources.FilterBuilder_AddColumn, 
                        "", 
                        Resources.FilterBuilder_AddColumn, 
                        "sf-query-button sf-add-column", 
                        new Dictionary<string, object> 
                        { 
                            { "onclick", "new SF.FindNavigator({{prefix:'{0}'}}).addColumn('{1}');".Formato(context.ControlID, Url.SignumAction("GetColumnName")) }, 
                            { "data-icon", "ui-icon-arrowthick-1-e" }
                        }));

                          
                    
               Write(Html.Button(context.Compose("btnEditColumns"), Resources.UserColumnsEdit, "new SF.FindNavigator({{prefix:'{0}'}}).editColumns();".Formato(context.ControlID), ""));

                                                                                                                                                                                      
                    
               Write(Html.Button(context.Compose("btnEditColumnsFinish"), Resources.EditColumnsFinishEdit, "new SF.FindNavigator({{prefix:'{0}'}}).editColumnsFinish();".Formato(context.ControlID), "", new Dictionary<string, object> { { "style", "display:none;" } }));

                                                                                                                                                                                                                                                                         
                }

WriteLiteral("            </div>\r\n");


               List<FilterOption> filterOptions = findOptions.FilterOptions;

WriteLiteral("            <div class=\"sf-filters-list\">\r\n                <span class=\"sf-explan" +
"ation\" style=\"");


                                                Write((filterOptions == null || filterOptions.Count == 0) ? "" : "display:none;");

WriteLiteral("\">");


                                                                                                                              Write(Resources.NoFiltersSpecified);

WriteLiteral("</span>\r\n                <table id=\"");


                      Write(context.Compose("tblFilters"));

WriteLiteral("\" style=\"");


                                                              Write((filterOptions == null || filterOptions.Count == 0) ? "display:none;" : "");

WriteLiteral("\">\r\n                    <thead>\r\n                        <tr>\r\n                  " +
"          <th>\r\n                            </th>\r\n                            <" +
"th class=\"sf-filter-field-header\">");


                                                          Write(Resources.Field);

WriteLiteral("\r\n                            </th>\r\n                            <th>");


                           Write(Resources.Operation);

WriteLiteral("\r\n                            </th>\r\n                            <th>");


                           Write(Resources.Value);

WriteLiteral("\r\n                            </th>\r\n                        </tr>\r\n             " +
"       </thead>\r\n                    <tbody>\r\n");


                         for (int i = 0; i < filterOptions.Count; i++)
                        {
                            FilterOption filter = filterOptions[i];
                            
                       Write(Html.NewFilter(findOptions.QueryName, filter, context, i));

                                                                                      
                        }

WriteLiteral("                    </tbody>\r\n                </table>\r\n            </div>\r\n     " +
"   </div>\r\n    </div>\r\n</div>\r\n");


        }
    }
}
