//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using Signum.Utilities;
    using Signum.Entities;
    using Signum.Web;
    using System.Collections;
    using System.Collections.Specialized;
    using System.ComponentModel.DataAnnotations;
    using System.Configuration;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Web.Caching;
    using System.Web.DynamicData;
    using System.Web.SessionState;
    using System.Web.Profile;
    using System.Web.UI.WebControls;
    using System.Web.UI.WebControls.WebParts;
    using System.Web.UI.HtmlControls;
    using System.Xml.Linq;
    using Signum.Entities.DynamicQuery;
    using Signum.Entities.Reflection;
    using Signum.Web.Properties;
    using Signum.Engine;
    using Signum.Utilities.DataStructures;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MvcRazorClassGenerator", "1.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Signum/Views/Pagination.cshtml")]
    public class _Page_Signum_Views_Pagination_cshtml : System.Web.Mvc.WebViewPage<Context>
    {


        public _Page_Signum_Views_Pagination_cshtml()
        {
        }
        protected System.Web.HttpApplication ApplicationInstance
        {
            get
            {
                return ((System.Web.HttpApplication)(Context.ApplicationInstance));
            }
        }
        public override void Execute()
        {






WriteLiteral("\r\n");


   
   int? elems = (int?)ViewData[ViewDataKeys.ElementsPerPage];
   FilterMode filterMode = (FilterMode)ViewData[ViewDataKeys.FilterMode];
   int columnsCount = (int)ViewData[ViewDataKeys.SearchControlColumnsCount];

   ResultTable resultTable = (ResultTable)ViewData[ViewDataKeys.Results];


WriteLiteral("\r\n<tr class=\"ui-widget-header ui-corner-bottom sf-search-footer\" style=\"");


                                                                  Write((filterMode == FilterMode.OnlyResults) ?  "display:none" : "");

WriteLiteral("\">\r\n    <td colspan=\"");


            Write(columnsCount);

WriteLiteral("\" class=\"sf-search-footer-pagination\">\r\n        <div class=\"sf-pagination-left\">\r" +
"\n");


             if (resultTable != null)
            {
                if (resultTable.TotalPages > 1)
                {

WriteLiteral("                    <span class=\"sf-pagination-strong\">");


                                                  Write(resultTable.StartElementIndex.ToString());

WriteLiteral("</span>\r\n");



WriteLiteral("                    <span> - </span>\r\n");



WriteLiteral("                    <span class=\"sf-pagination-strong\">");


                                                  Write(resultTable.EndElementIndex.ToString());

WriteLiteral("</span>\r\n");



WriteLiteral("                    <span>");


                      Write(" {0} ".Formato(Signum.Web.Properties.Resources.SearchControl_Pagination_Of));

WriteLiteral("</span>\r\n");


                }

WriteLiteral("                <span class=\"sf-pagination-strong\">");


                                              Write(resultTable.TotalElements.ToString());

WriteLiteral("</span>\r\n");



WriteLiteral("                <span>");


                  Write(" {0}.".Formato(Resources.SearchControl_Pagination_Results));

WriteLiteral("</span>\r\n");


            }

WriteLiteral("        </div>\r\n        <div class=\"sf-pagination-center\">\r\n            <span>");


             Write(Resources.SearchControl_Pagination_Rows);

WriteLiteral("</span>\r\n");


               
                var topItems = new List<int> { 5, 10, 20, 50, 100, 200 }.Select(i => new SelectListItem { Text = i.ToString(), Value = i.ToString(), Selected = i.ToString() == elems.TryToString() }).ToList();
                topItems.Add(new SelectListItem { Text = Resources.SearchControl_Pagination_All, Value = "", Selected = elems == null });
            

WriteLiteral("            ");


       Write(Html.DropDownList(Model.Compose("sfElems"), topItems, new { @class = "sf-pagination-size" }));

WriteLiteral("\r\n        </div>\r\n        <div class=\"sf-pagination-right\">\r\n");


             if (resultTable != null)
            {

WriteLiteral("                <input type=\"hidden\" id=\"");


                                     Write(Model.Compose("sfPage"));

WriteLiteral("\" value=\"");


                                                                       Write(resultTable.CurrentPage);

WriteLiteral("\" />\r\n");



WriteLiteral("                <input type=\"button\" class=\"sf-pagination-button\" data-page=\"");


                                                                         Write(resultTable.CurrentPage - 1);

WriteLiteral("\" ");


                                                                                                         Write((resultTable.CurrentPage <= 1) ? "disabled=\"disabled\"" : "");

WriteLiteral(" value=\"&lt;\" />\r\n");


            
                MinMax<int> interval = new MinMax<int>(
                    Math.Max(1, resultTable.CurrentPage - 2),
                    Math.Min(resultTable.CurrentPage + 2, resultTable.TotalPages));

                if (interval.Min != 1)
                {

WriteLiteral("                    <input type=\"button\" class=\"sf-pagination-button\" data-page=\"" +
"1\" value=\"1\" />\r\n");


                    if (interval.Min - 1 != 1)
                    {

WriteLiteral("                        <span>...</span>\r\n");


                    }
                }

                for (int i = interval.Min; i < resultTable.CurrentPage; i++)
                {

WriteLiteral("                    <input type=\"button\" class=\"sf-pagination-button\" data-page=\"" +
"");


                                                                            Write(i);

WriteLiteral("\" value=\"");


                                                                                       Write(i);

WriteLiteral("\" />\r\n");


                }


WriteLiteral("                <span class=\"sf-pagination-strong\">");


                                              Write(resultTable.CurrentPage.ToString());

WriteLiteral("</span>\r\n");



                for (int i = resultTable.CurrentPage + 1; i <= interval.Max; i++)
                {

WriteLiteral("                    <input type=\"button\" class=\"sf-pagination-button\" data-page=\"" +
"");


                                                                            Write(i);

WriteLiteral("\" value=\"");


                                                                                       Write(i);

WriteLiteral("\" />\r\n");


                }

                if (interval.Max != resultTable.TotalPages)
                {
                    if (interval.Max + 1 != resultTable.TotalPages)
                    {

WriteLiteral("                        <span>...</span>\r\n");


                    }

WriteLiteral("                    <input type=\"button\" class=\"sf-pagination-button\" data-page=\"" +
"");


                                                                            Write(resultTable.TotalPages);

WriteLiteral("\" value=\"");


                                                                                                            Write(resultTable.TotalPages);

WriteLiteral("\" />\r\n");


                }
            

WriteLiteral("                <input type=\"button\" class=\"sf-pagination-button\" data-page=\"");


                                                                         Write(resultTable.CurrentPage + 1);

WriteLiteral("\" ");


                                                                                                         Write((resultTable.TotalPages <= resultTable.CurrentPage) ? "disabled=\"disabled\"" : "");

WriteLiteral(" value=\"&gt;\" />\r\n");


            }

WriteLiteral("        </div>\r\n    </td>\r\n</tr>");


        }
    }
}
