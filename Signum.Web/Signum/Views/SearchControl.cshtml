@using Signum.Web.Properties
@using Signum.Entities.DynamicQuery
@using Signum.Engine.DynamicQuery
@using System.Configuration
@using Signum.Entities.Reflection

@{ Context context = (Context)Model;
   FindOptions findOptions = (FindOptions)ViewData[ViewDataKeys.FindOptions];
   QueryDescription queryDescription = (QueryDescription)ViewData[ViewDataKeys.QueryDescription];
   Type entitiesType = Reflector.ExtractLite(queryDescription.Columns.Single(a => a.IsEntity).Type);
   bool viewable = findOptions.View && Navigator.IsNavigable(entitiesType, true); }
<div id="@context.Compose("divSearchControl")" class="searchControl">
    @Html.Hidden(context.Compose("sfWebQueryName"), Navigator.ResolveWebQueryName(findOptions.QueryName), new { disabled = "disabled" })
    @Html.Hidden(context.Compose(ViewDataKeys.AllowMultiple), findOptions.AllowMultiple.ToString(), new { disabled = "disabled" })
    @Html.Hidden(context.Compose(ViewDataKeys.View), viewable, new { disabled = "disabled" })
    @Html.Hidden(context.Compose(ViewDataKeys.EntityTypeName), Navigator.ResolveWebTypeName(entitiesType), new { disabled = "disabled" })
    @if (findOptions.EntityContextMenu)
    {
        <script type="text/javascript">
            var @context.Compose("EntityContextMenuUrl")  = '@Url.SignumAction("GetContextualPanel")';
        </script>
    }    
    <script type="text/javascript">
        var @context.Compose("QuickFilterUrl")  = '@Url.SignumAction("QuickFilter")'; 
        var @context.Compose("SearchUrl") = '@Url.SignumAction("Search")';
    </script>
    @if(findOptions.SearchOnLoad)
    {
        <script type="text/javascript">
            $(document).ready(function () { SearchOnLoad('@context.ControlID'); });
        </script>
    }
    <div id="@context.Compose("divFilters")" style="display:@((findOptions.FilterMode != FilterMode.AlwaysHidden && findOptions.FilterMode != FilterMode.OnlyResults) ? "block" : "none")" >
        @{ Html.RenderPartial(Navigator.Manager.FilterBuilderUrl, ViewData);}
    </div>
    <div class="search-footer" style="display:@((findOptions.FilterMode != FilterMode.OnlyResults) ? "block" : "none")">
        @Html.Label(null, Resources.NumberOfRows, context.Compose(ViewDataKeys.Top), null)
        @{ int? top = findOptions.Top ?? Navigator.Manager.QuerySettings.GetOrThrow(findOptions.QueryName, "Missing QuerySettings for QueryName {0}").Top;}
        @HtmlHelperExtenders.InputType("text", context.Compose(ViewDataKeys.Top), top.TryToString(), new Dictionary<string, object> { { "size", "5" }, { "onkeydown", "return validator.number(event)" } })
        @Html.Hidden(context.Compose("OrderBy"), findOptions.OrderOptions == null ? "" :
                (findOptions.OrderOptions.ToString(oo => (oo.OrderType == OrderType.Ascending ? "" : "-") + oo.Token.FullKey(), ",")))
        <input class="btnSearch" id="@context.Compose("btnSearch")" type="button" onclick="@("Search({{prefix:'{0}',searchControllerUrl:'{1}'}});".Formato(context.ControlID, Url.SignumAction("Search")))" value="@Resources.Search" />
        @if (findOptions.Create && Navigator.IsCreable(entitiesType, true) && viewable)
        {
            <input type="button" value="+" class="lineButton create" onclick="@(findOptions.Creating.HasText() ? findOptions.Creating : "SearchCreate({{prefix:'{0}',controllerUrl:'{1}'}});".Formato(context.ControlID, Url.SignumAction(string.IsNullOrEmpty(context.ControlID) ? "Create" : "PopupCreate")))" />
        }
        <ul class="button-bar">
            @ButtonBarQueryHelper.GetButtonBarElementsForQuery(this.ViewContext, findOptions.QueryName, entitiesType, context.ControlID).ToString(Html)
        </ul>
    </div>
    @if (findOptions.FilterMode != FilterMode.OnlyResults)
    {
        <div class="clearall">
        </div>
    }
    <div id="@context.Compose("divResults")" class="divResults">
        <table id="@context.Compose("tblResults")" class="tblResults">
            <thead>
                <tr>
                    @if (findOptions.AllowMultiple.HasValue)
                    {
                        <th class="thRowSelection">
                            @if (findOptions.AllowMultiple.Value)
                            {
                                @Html.CheckBox(context.Compose("cbSelectAll"), false, new { onclick = "javascript:ToggleSelectAll('{0}');".Formato(context.ControlID) })
                            }
                        </th>
                    }
                    @if (viewable)
                    {
                        <th class="thRowEntity">
                        </th>
                    }
                    @foreach (var col in findOptions.MergeColumns())
                    {
                        var order = findOptions.OrderOptions.FirstOrDefault(oo => oo.Token.FullKey() == col.Name);
                        OrderType? orderType = null;
                        if (order != null)
                        {
                            orderType = order.OrderType;
                        }
                        <th class="@((orderType == null) ? "" : (orderType == OrderType.Ascending ? "headerSortDown" : "headerSortUp"))">
                            <input type="hidden" value="@col.Name" />
                            @col.DisplayName
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
            </tbody>
            <tfoot>
            </tfoot>
        </table>
    </div>
</div>
<script type="text/javascript">    
    InitializeSearchControl("@context.ControlID");
</script>
