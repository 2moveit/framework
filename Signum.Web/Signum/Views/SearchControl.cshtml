@using Signum.Web.Properties
@using Signum.Entities.DynamicQuery
@using Signum.Engine.DynamicQuery
@using System.Configuration
@using Signum.Entities.Reflection
@using Signum.Web.Properties
@model Context
@{ 
    FindOptions findOptions = (FindOptions)ViewData[ViewDataKeys.FindOptions];
    QueryDescription queryDescription = (QueryDescription)ViewData[ViewDataKeys.QueryDescription];
    Type entitiesType = Reflector.ExtractLite(queryDescription.Columns.Single(a => a.IsEntity).Type);
    bool viewable = findOptions.View && Navigator.IsNavigable(entitiesType, true);}
<div id="@Model.Compose("divSearchControl")" class="sf-search-control">
    @Html.Hidden(Model.Compose("sfWebQueryName"), Navigator.ResolveWebQueryName(findOptions.QueryName), new { disabled = "disabled" })
    @Html.Hidden(Model.Compose("sfAllowMultiple"), findOptions.AllowMultiple.ToString(), new { disabled = "disabled" })
    @Html.Hidden(Model.Compose("sfView"), viewable, new { disabled = "disabled" })
    @Html.Hidden(Model.Compose("sfEntityTypeName"), Navigator.ResolveWebTypeName(entitiesType), new { disabled = "disabled" })
    @if (findOptions.EntityContextMenu)
    {
        <script type="text/javascript">
            var @Model.Compose("EntityContextMenuUrl")  = '@Url.SignumAction("GetContextualPanel")';
         </script>
    }
    <script type="text/javascript">
        var @Model.Compose("QuickFilterUrl") = '@Url.SignumAction("QuickFilter")'; 
        var @Model.Compose("SearchUrl") = '@Url.SignumAction("Search")';
        var @Model.Compose("SaveUrl") = '@Url.SignumAction("TrySavePartial")';
    </script>
    @if(findOptions.SearchOnLoad)
    {
        <script type="text/javascript">
            $(document).ready(function () { { SF.FindNavigator.searchOnLoad('@Model.ControlID'); } });
            </script>    
    }
    <div id="@Model.Compose("divFilters")" style="display:@((findOptions.FilterMode != FilterMode.AlwaysHidden && findOptions.FilterMode != FilterMode.OnlyResults) ? "block" : "none")" >
        @{ Html.RenderPartial(Navigator.Manager.FilterBuilderUrl, ViewData);}
    </div>
    <div class="sf-search-footer" style="display:@((findOptions.FilterMode != FilterMode.OnlyResults) ? "block" : "none")">
        @Html.Label(null, Resources.NumberOfRows, Model.Compose("sfTop"), null)
        @{ int? top = findOptions.Top ?? Navigator.Manager.QuerySettings.GetOrThrow(findOptions.QueryName, "Missing QuerySettings for QueryName {0}").Top;}
        @HtmlHelperExtenders.InputType("text", Model.Compose("sfTop"), top.TryToString(), new Dictionary<string, object> { { "size", "5" }, { "onkeydown", "return SF.InputValidator.isNumber(event)" } })
        @Html.Hidden(Model.Compose("sfOrders"), findOptions.OrderOptions.Empty() ? "" :
                (findOptions.OrderOptions.ToString(oo => (oo.OrderType == OrderType.Ascending ? "" : "-") + oo.Token.FullKey(), ";") + ";"))
        <div class="sf-button-bar">
            <button type="submit" class="sf-query-button sf-search" data-icon="ui-icon-search" id="@Model.Compose("qbSearch")" onclick="@("new SF.FindNavigator({{prefix:'{0}',searchControllerUrl:'{1}'}}).search();return false;".Formato(Model.ControlID, Url.SignumAction("Search")))">@Resources.Search</button>
            @if (findOptions.Create && Navigator.IsCreable(entitiesType, true) && viewable)
            {
                string creating = findOptions.Creating.HasText() ? findOptions.Creating :
                    "SF.FindNavigator.create({{prefix:'{0}',controllerUrl:'{1}'}});return false;".Formato(Model.ControlID, Url.SignumAction(string.IsNullOrEmpty(Model.ControlID) ? "Create" : "PopupCreate"));
                <a class="sf-query-button" data-icon="ui-icon-plusthick" data-text="false" id="@Model.Compose("qbSearchCreate")" onclick="@creating">@Resources.Search_Create</a>
            }
            @ButtonBarQueryHelper.GetButtonBarElementsForQuery(this.ViewContext, findOptions.QueryName, entitiesType, Model.ControlID).ToString(Html)
        </div>
    </div>
    @if (findOptions.FilterMode != FilterMode.OnlyResults)
    {
        <div class="clearall">
        </div>
    }
    <div id="@Model.Compose("sf-search-results-container")" class="sf-search-results-container">
        <table id="@Model.Compose("sf-search-results")" class="sf-search-results">
            <thead>
                <tr>
                    @if (findOptions.AllowMultiple.HasValue)
                    {
                        <th class="thRowSelection">
                            @if (findOptions.AllowMultiple.Value)
                            {
                                @Html.CheckBox(Model.Compose("cbSelectAll"), false, new { onclick = "javascript:new SF.FindNavigator({{prefix:'{0}'}}).toggleSelectAll();".Formato(Model.ControlID) })
                            }
                        </th>
                    }
                    @if (viewable)
                    {
                        <th class="thRowEntity">
                        </th>
                    }
                    @foreach (var col in findOptions.MergeColumns())
                    {
                        var order = findOptions.OrderOptions.FirstOrDefault(oo => oo.Token.FullKey() == col.Name);
                        OrderType? orderType = null;
                        if (order != null)
                        {
                            orderType = order.OrderType;
                        }
                        <th class="@((orderType == null) ? "" : (orderType == OrderType.Ascending ? "sf-header-sort-down" : "sf-header-sort-up"))">
                            <input type="hidden" value="@col.Name" />
                            @col.DisplayName
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
            </tbody>
            <tfoot>
            </tfoot>
        </table>
    </div>
</div>
<script type="text/javascript">
    new SF.FindNavigator({ prefix: "@Model.ControlID" }).initialize();
</script>
