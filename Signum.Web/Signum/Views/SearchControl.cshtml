@using Signum.Web.Properties
@using Signum.Entities.DynamicQuery
@using Signum.Engine.DynamicQuery
@using System.Configuration
@using Signum.Entities.Reflection
@using Signum.Web.Properties
@model Context
@{ 
    Model.ReadOnly = false; /*SearchControls Context should never inherit Readonly property of parent context */
    FindOptions findOptions = (FindOptions)ViewData[ViewDataKeys.FindOptions];
    QueryDescription queryDescription = (QueryDescription)ViewData[ViewDataKeys.QueryDescription];
    var entityColumn = queryDescription.Columns.SingleEx(a => a.IsEntity);
    Type entitiesType = Lite.Extract(entityColumn.Type);
    Implementations implementations = entityColumn.Implementations.Value;
    bool? allowMultiple = findOptions.AllowMultiple;
    if (allowMultiple == null && findOptions.FilterMode != FilterMode.OnlyResults)
    {
        allowMultiple = Navigator.QuerySettings(findOptions.QueryName).AllowMultiple;
    }
    int elementsPerPage = findOptions.ElementsPerPage ?? (Navigator.Manager.QuerySettings.GetOrThrow(findOptions.QueryName, "Missing QuerySettings for QueryName {0}").ElementsPerPage) ?? FindOptions.DefaultElementsPerPage;
    JsFindNavigator jsFindNavigator = JsFindNavigator.GetFor(Model.ControlID);
}
<div id="@Model.Compose("sfSearchControl")" 
     class="sf-search-control" 
     data-prefix="@Model.ControlID" 
     data-find-url="@Navigator.FindRoute(findOptions.QueryName)" 
     >

    @Html.Hidden(Model.Compose("sfEntityTypeNames"), 
                                implementations.IsByAll ? "[All]" :
                                implementations.Types.ToString(t => Navigator.ResolveWebTypeName(t), ","), 
        new { disabled = "disabled" })
    
    @{
        bool filtersAlwaysHidden = findOptions.FilterMode == FilterMode.AlwaysHidden || findOptions.FilterMode == FilterMode.OnlyResults;
        bool filtersVisible = findOptions.FilterMode == FilterMode.Visible;
     }
    
    <div style="display:@(filtersAlwaysHidden ? "none" : "block")">
        <div class="sf-fields-list">
            <div class="ui-widget sf-filters" @(filtersVisible ? "" : "style=display:none")>
                <div class="ui-widget-header ui-corner-top sf-filters-body">
                    @Html.TokenOptionsCombo(queryDescription.QueryName, SearchControlHelper.RootTokensCombo(queryDescription, null), Model, 0, false)
                
                    @Html.Href(
                            Model.Compose("btnAddFilter"), 
                            Resources.FilterBuilder_AddFilter, 
                            "",
                            Resources.Signum_selectToken,
                            "sf-query-button sf-add-filter sf-disabled", 
                            new Dictionary<string, object> 
                            { 
                                { "data-icon", "ui-icon-arrowthick-1-s" }
                            })

                    @if (string.IsNullOrEmpty(Model.ControlID) && findOptions.AllowChangeColumns)
                    {
                        @Html.Href(
                            Model.Compose("btnAddColumn"), 
                            Resources.FilterBuilder_AddColumn, 
                            "",
                            Resources.Signum_selectToken,
                            "sf-query-button sf-add-column sf-disabled", 
                            new Dictionary<string, object> 
                            { 
                                { "data-icon", "ui-icon-arrowthick-1-e" },
                                { "data-url", Url.SignumAction("GetColumnName") }
                            })
                    }
                </div>
                @{ 
                    ViewData[ViewDataKeys.FilterOptions] = findOptions.FilterOptions;
                    Html.RenderPartial(Navigator.Manager.FilterBuilderView); 
                }
            </div>
        </div>
    </div>
    
    @if (!filtersAlwaysHidden)
    {
        @Html.Href("",
                (filtersVisible ? Resources.Signum_hideFilters : Resources.Signum_showFilters),
                "",
                (filtersVisible ? Resources.Signum_hideFilters : Resources.Signum_showFilters),
                "sf-query-button sf-filters-header" + (filtersVisible ? "" : " close"),
                new Dictionary<string, object> 
                { 
                    { "onclick", "{0}.toggleFilters()".Formato(jsFindNavigator.ToJS()) },
                    { "data-icon", filtersVisible ? "ui-icon-triangle-1-n" : "ui-icon-triangle-1-e" }
                })
    }
    @if (Model.ControlID.HasText() && findOptions.FilterMode != FilterMode.OnlyResults && (bool?)ViewData[ViewDataKeys.InPopup] != true)
    { 
        @Html.Href(Model.Compose("sfFullScreen"),
            "Full Screen",
            "",
            "Full Screen",
            "sf-query-button sf-query-fullscreen", 
            new Dictionary<string, object> 
            { 
                { "data-icon", "ui-icon-extlink" },
                { "data-text", false }
            })
    }
    
    <div class="sf-query-button-bar" style="display:@((findOptions.FilterMode != FilterMode.OnlyResults) ? "block" : "none")">
        <button type="submit" class="sf-query-button sf-search" data-icon="ui-icon-search" id="@Model.Compose("qbSearch")" onclick="@(jsFindNavigator.search().ToJS() + ";return false")">@Resources.Search</button>
        @if (findOptions.Create)
        {
            string creating = findOptions.Creating.HasText() ? 
                    findOptions.Creating :
                    "{0}.create();return false;".Formato(jsFindNavigator.ToJS());
            <a class="sf-query-button" data-icon="ui-icon-plusthick" data-text="false" id="@Model.Compose("qbSearchCreate")" onclick="@creating">@Resources.Search_Create</a>
        }
        @ButtonBarQueryHelper.GetButtonBarElementsForQuery(new QueryButtonContext
   {
       ControllerContext = this.ViewContext,
       QueryName = findOptions.QueryName,
       ManualQueryButtons = (ToolBarButton[])ViewData[ViewDataKeys.ManualToolbarButtons],
       EntityType = entitiesType,
       Prefix = Model.ControlID
   }).ToString(Html)
    </div>
    @if (findOptions.FilterMode != FilterMode.OnlyResults)
    {
        <div class="clearall">
        </div>
    }
    <div id="@Model.Compose("divResults")" class="ui-widget ui-corner-all sf-search-results-container">
        <table id="@Model.Compose("tblResults")" class="sf-search-results">
            <thead class="ui-widget-header ui-corner-top">
                <tr>
                    @if (allowMultiple.HasValue)
                    {
                        <th class="ui-state-default th-col-selection">
                            @if (allowMultiple.Value)
                            {
                                @Html.CheckBox(Model.Compose("cbSelectAll"), false, new { onclick = "{0}.toggleSelectAll()".Formato(jsFindNavigator.ToJS()) })
                            }
                        </th>
                    }
                    @if (findOptions.View)
                    {
                        <th class="ui-state-default th-col-entity">
                        </th>
                    }
                    @{List<Column> columns = findOptions.MergeColumns(); }
                    @foreach (var col in columns)
                    {
                        var order = findOptions.OrderOptions.FirstOrDefault(oo => oo.Token.FullKey() == col.Name);
                        OrderType? orderType = null;
                        if (order != null)
                        {
                            orderType = order.OrderType;
                        }
                        <th class="ui-state-default @((orderType == null) ? "" : (orderType == OrderType.Ascending ? "sf-header-sort-down" : "sf-header-sort-up"))">
                            <div class="sf-header-droppable sf-header-droppable-right"></div>
                            <div class="sf-header-droppable sf-header-droppable-left"></div>
                            <input type="hidden" value="@col.Name" />
                            <span>@col.DisplayName</span>
                        </th>
                    }
                </tr>
            </thead>
            <tbody class="ui-widget-content">
                @{ int columnsCount = columns.Count + (findOptions.View ? 1 : 0) + (allowMultiple.HasValue ? 1 : 0); }
                <tr>
                    <td colspan="@columnsCount">@Resources.Signum_noResults</td>
                </tr>
                @{ 
                    ViewData[ViewDataKeys.ElementsPerPage] = elementsPerPage;
                    ViewData[ViewDataKeys.FilterMode] = findOptions.FilterMode;
                    ViewData[ViewDataKeys.SearchControlColumnsCount] = columnsCount;
                }
                @Html.Partial(Navigator.Manager.PaginationView, Model)
            </tbody>
        </table>
    </div>
</div>
@{ 
    var jsFindOptions = new JsFindOptions() 
    { 
        FindOptions = findOptions,
        Prefix = Model.ControlID,
        ElementsPerPage = elementsPerPage
    };
}
<script type="text/javascript">
    $("#@Model.Compose("sfSearchControl")").findNavigator(@MvcHtmlString.Create(jsFindOptions.ToJS()));
</script>
