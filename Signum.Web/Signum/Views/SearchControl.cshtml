@using Signum.Entities.DynamicQuery
@using Signum.Engine.DynamicQuery
@using System.Configuration
@using Signum.Entities.Reflection
@model Context
@{ 
    Model.ReadOnly = false; /*SearchControls Context should never inherit Readonly property of parent context */
    FindOptions findOptions = (FindOptions)ViewData[ViewDataKeys.FindOptions];
    QueryDescription queryDescription = (QueryDescription)ViewData[ViewDataKeys.QueryDescription];
    var entityColumn = queryDescription.Columns.SingleEx(a => a.IsEntity);
    Type entitiesType = Lite.Extract(entityColumn.Type);
    Implementations implementations = entityColumn.Implementations.Value;
    findOptions.Pagination = findOptions.Pagination ?? (Navigator.Manager.QuerySettings.GetOrThrow(findOptions.QueryName, "Missing QuerySettings for QueryName {0}").Pagination) ?? FindOptions.DefaultPagination;

    ViewData[ViewDataKeys.FindOptions] = findOptions;

    var prefix = Model.Compose("sfSearchControl");
}
<div id="@prefix" 
     class="sf-search-control SF-control-container" 
     data-prefix="@Model.Prefix" 
     data-find-url="@Navigator.FindRoute(findOptions.QueryName)" 
     data-queryName="@QueryUtils.GetQueryUniqueKey(findOptions.QueryName)" 
     >

    @Html.Hidden(Model.Compose("sfEntityTypeNames"),
                                implementations.IsByAll ? EntityBase.ImplementedByAllKey :
                                implementations.Types.ToString(t => Navigator.ResolveWebTypeName(t), ","), new { disabled = "disabled" })
    @Html.Hidden(Model.Compose("sfEntityTypeNiceNames"),
                                implementations.IsByAll ? EntityBase.ImplementedByAllKey :
                                implementations.Types.ToString(t => t.NiceName(), ","), new { disabled = "disabled" })


    @{
        bool filtersAlwaysHidden = findOptions.FilterMode == FilterMode.AlwaysHidden || findOptions.FilterMode == FilterMode.OnlyResults;
        bool filtersVisible = findOptions.FilterMode == FilterMode.Visible;
    }

    <div style="display:@(filtersAlwaysHidden ? "none" : "block")">
        @{
            ViewData[ViewDataKeys.FilterOptions] = findOptions.FilterOptions;
            ViewData[ViewDataKeys.FiltersVisible] = filtersVisible;
            ViewData[ViewDataKeys.ShowAddColumn] = string.IsNullOrEmpty(Model.Prefix) && findOptions.AllowChangeColumns;
            Html.RenderPartial(Navigator.Manager.FilterBuilderView); 
        }
    </div>




    <div class="sf-query-button-bar" style="@(findOptions.FilterMode != FilterMode.OnlyResults ? null : "display:none")">
        @if (!filtersAlwaysHidden)
        {
            <a  class="sf-query-button sf-filters-header btn btn-default @(filtersVisible ? "active" : "")"
            onclick="@JsFunction.SFControlThen(prefix, "toggleFilters()")"
            title="@(filtersVisible ? JavascriptMessage.hideFilters.NiceToString() : JavascriptMessage.showFilters.NiceToString())">
                <span class="glyphicon glyphicon glyphicon-filter"></span>
            </a>
        }
        <button class="sf-query-button sf-search btn btn-primary" id="@Model.Compose("qbSearch")" onclick="event.preventDefault(); @JsFunction.SFControlThen(prefix, "search()")" >@SearchMessage.Search.NiceToString()</button>

        <div class="btn-group">
            <button class="sf-query-button sf-tm-selectedbtn btn btn-default dropdown-toggle" data-toggle="dropdown" id="@Model.Compose("btnSelected")" disabled="disabled">
                @JavascriptMessage.Selected
                (<span id="@Model.Compose("btnSelectedSpan")">0</span>)
                <span class="caret"></span>
            </button>
            <ul class="dropdown-menu" id="@Model.Compose("btnSelectedDropDown")">
                <li>hi there!</li>
            </ul>
        </div>

        @ButtonBarQueryHelper.GetButtonBarElementsForQuery(new QueryButtonContext
       {
           Url = Url,
           ControllerContext = this.ViewContext,
           QueryName = findOptions.QueryName,
           ManualQueryButtons = (ToolBarButton[])ViewData[ViewDataKeys.ManualToolbarButtons],
           EntityType = entitiesType,
           Prefix = Model.Prefix
       }).ToStringButton(Html)

        @if (findOptions.Create)
        {
            <a class="sf-query-button btn btn-default pull-right" id="@Model.Compose("qbSearchCreate")" title="@SearchMessage.Create.NiceToString()" onclick="event.preventDefault();@JsFunction.SFControlThen(prefix, "create_click()")">
                <span class="glyphicon glyphicon-plus"></span>
            </a>
        }
    </div>
    @if (findOptions.FilterMode != FilterMode.OnlyResults)
    {
        <div class="clearall">
        </div>
    }
    <div id="@Model.Compose("divResults")" class="sf-search-results-container table-responsive">

        <table id="@Model.Compose("tblResults")" class="sf-search-results  table table-hover  table-condensed">
            <thead>
                <tr>
                    @if (findOptions.AllowSelection)
                    {
                        <th class="sf-th-selection">
                            @Html.CheckBox(Model.Compose("cbSelectAll"), false, new { onclick = JsFunction.SFControlThen(prefix, "toggleSelectAll()") })
                        </th>
                    }
                    @if (findOptions.Navigate)
                    {
                        <th class="sf-th-entity"></th>
                    }
                    @{List<Column> columns = findOptions.MergeColumns(); }
                    @foreach (var col in columns)
                    {
                        var order = findOptions.OrderOptions.FirstOrDefault(oo => oo.Token.FullKey() == col.Name);
                        OrderType? orderType = null;
                        if (order != null)
                        {
                            orderType = order.OrderType;
                        }
                        <th class="">
                            <div class="sf-header-droppable sf-header-droppable-right"></div>
                            <div class="sf-header-droppable sf-header-droppable-left"></div>
                            <input type="hidden" value="@col.Name" />
                            <span class="sf-header-sort @((orderType == null) ? "" : (orderType == OrderType.Ascending ? "asc" : "desc"))"></span>
                            <span>@col.DisplayName</span>
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @{ int columnsCount = columns.Count + (findOptions.Navigate ? 1 : 0) + (findOptions.AllowSelection ? 1 : 0); }
                <tr>
                    <td colspan="@columnsCount">@JavascriptMessage.searchForResults.NiceToString()</td>
                </tr>
                @{ 
                    ViewData[ViewDataKeys.Pagination] = findOptions.Pagination;
                    ViewData[ViewDataKeys.FilterMode] = findOptions.FilterMode;
                    ViewData[ViewDataKeys.SearchControlColumnsCount] = columnsCount;
                }
                @Html.Partial(Navigator.Manager.PaginationSelectorView, Model)
            </tbody>
        </table>
    </div>
</div>
<script type="text/javascript">
    require(["@JsFunction.FinderModule"], function(Finder) { new Finder.SearchControl($("#@Model.Compose("sfSearchControl")"), @(MvcHtmlString.Create(findOptions.ToJS(Model.Prefix).ToString()))).ready();});
</script>
