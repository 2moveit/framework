//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using Signum.Utilities;
    using Signum.Entities;
    using Signum.Web;
    using System.Collections;
    using System.Collections.Specialized;
    using System.ComponentModel.DataAnnotations;
    using System.Configuration;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Web.Caching;
    using System.Web.DynamicData;
    using System.Web.SessionState;
    using System.Web.Profile;
    using System.Web.UI.WebControls;
    using System.Web.UI.WebControls.WebParts;
    using System.Web.UI.HtmlControls;
    using System.Xml.Linq;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MvcRazorClassGenerator", "1.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Signum/Views/ChooserPopup.cshtml")]
    public class _Page_Signum_Views_ChooserPopup_cshtml : System.Web.Mvc.WebViewPage<dynamic>
    {
#line hidden

        public _Page_Signum_Views_ChooserPopup_cshtml()
        {
        }
        protected System.Web.HttpApplication ApplicationInstance
        {
            get
            {
                return ((System.Web.HttpApplication)(Context.ApplicationInstance));
            }
        }
        public override void Execute()
        {

   Context context = (Context)Model;

WriteLiteral("<div id=\"");


    Write(context.Compose("externalPopupDiv"));

WriteLiteral("\">\r\n    <div id=\"");


        Write(context.Compose("modalBackground"));

WriteLiteral("\" class=\"transparent popupBackground\">\r\n    </div>\r\n    <div id=\"");


        Write(context.Compose("panelPopup"));

WriteLiteral("\" class=\"popupWindow\">\r\n");


         if (ViewData[ViewDataKeys.OnCancel] != null)
        {

WriteLiteral("            <div class=\"closebox\" id=\"");


                                 Write(context.Compose(ViewDataKeys.BtnCancel));

WriteLiteral("\" onclick=\"");


                                                                                    Write(ViewData[ViewDataKeys.OnCancel]);

WriteLiteral("\">\r\n            </div>\r\n");


        }
        else
        {

WriteLiteral("            <div class=\"closebox\" id=\"");


                                 Write(context.Compose(ViewDataKeys.BtnCancel));

WriteLiteral("\">\r\n            </div>\r\n");


        }

WriteLiteral("        <div id=\"");


            Write(context.Compose("divPopupDragHandle"));

WriteLiteral("\" class=\"dragHandle\">\r\n");


               string pageTitle = (string)ViewData[ViewDataKeys.Title];


             if (pageTitle != null)
            {
WriteLiteral(" <span class=\"popupEntityName\">");


                                       Write(pageTitle);

WriteLiteral("</span> ");


                                                              }

WriteLiteral("        </div>\r\n        ");


   Write(ViewData[ViewDataKeys.CustomHtml]);

WriteLiteral("\r\n    </div>\r\n</div>\r\n");


Write(Html.DynamicJs("~/signum/Scripts/SF_DragAndDrop.js").Callback(@"function () {{
     SF.DragAndDrop(document.getElementById(""{0}""), document.getElementById(""{1}""));}}"
        .Formato(context.Compose("divPopupDragHandle"), context.Compose("panelPopup"))));

WriteLiteral("\r\n");


        }
    }
}
