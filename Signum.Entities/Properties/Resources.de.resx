<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="_0As1" xml:space="preserve">
    <value>({0} als {1})</value>
  </data>
  <data name="_0DoesNotHaveAValid0Format" xml:space="preserve">
    <value>{{0}} hat nicht eine gültige {0}-Format</value>
  </data>
  <data name="_0HasMoreThan0DecimalPlaces" xml:space="preserve">
    <value>{{0}} hat mehr als {0} Dezimalstellen</value>
  </data>
  <data name="_0HasNoCorrectFormat" xml:space="preserve">
    <value>{0} hat keine richtigen format</value>
  </data>
  <data name="_0HasSomeRepeatedElements0" xml:space="preserve">
    <value>{{0}} hat einige wiederholte Elemente: {0}</value>
  </data>
  <data name="_0HasToBe0Than1" xml:space="preserve">
    <value>{{0}} hat {0} {1} sein</value>
  </data>
  <data name="_0HasToBeBetween0And1" xml:space="preserve">
    <value>{{0}} muss zwischen {0} und {1}</value>
  </data>
  <data name="_0HasToBeLowercase" xml:space="preserve">
    <value>{0} muss Kleinbuchstaben sein</value>
  </data>
  <data name="_0HasToBeUppercase" xml:space="preserve">
    <value>{0} muss in Großbuchstaben geschrieben werden</value>
  </data>
  <data name="_0IsNecessary" xml:space="preserve">
    <value>{0} ist notwendig</value>
  </data>
  <data name="_0IsNecessaryOnState1" xml:space="preserve">
    <value>{0} ist notwendig auf Status {1}</value>
  </data>
  <data name="_0IsNotAllowed" xml:space="preserve">
    <value>{0} ist nicht zulässig</value>
  </data>
  <data name="_0IsNotAllowedOnState1" xml:space="preserve">
    <value>{0} ist auf Status {1} nicht zulässig</value>
  </data>
  <data name="_0IsNotAValidIdentifier" xml:space="preserve">
    <value>'{0}' ist kein gültiger Bezeichner</value>
  </data>
  <data name="_0IsNotSet" xml:space="preserve">
    <value>{0} ist nicht festgelegt</value>
  </data>
  <data name="And" xml:space="preserve">
    <value> und </value>
  </data>
  <data name="As0" xml:space="preserve">
    <value>Als {0}</value>
  </data>
  <data name="Be" xml:space="preserve">
    <value>werden </value>
  </data>
  <data name="BeBetween0And1" xml:space="preserve">
    <value>zwischen Sie {0} und {1}</value>
  </data>
  <data name="BeNotNull" xml:space="preserve">
    <value>nicht null sein</value>
  </data>
  <data name="Column0NotFound" xml:space="preserve">
    <value>Spalte {0} wurde nicht gefunden</value>
  </data>
  <data name="ComparisonType_DistinctTo" xml:space="preserve">
    <value>anders als</value>
  </data>
  <data name="ComparisonType_EqualTo" xml:space="preserve">
    <value>gleich</value>
  </data>
  <data name="ComparisonType_GreaterThan" xml:space="preserve">
    <value>größer als</value>
  </data>
  <data name="ComparisonType_GreaterThanOrEqual" xml:space="preserve">
    <value>größer als oder gleich</value>
  </data>
  <data name="ComparisonType_LessThan" xml:space="preserve">
    <value>weniger als</value>
  </data>
  <data name="ComparisonType_LessThanOrEqual" xml:space="preserve">
    <value>kleiner oder gleich</value>
  </data>
  <data name="Count" xml:space="preserve">
    <value>Num</value>
  </data>
  <data name="Date" xml:space="preserve">
    <value>Datum</value>
  </data>
  <data name="Day" xml:space="preserve">
    <value>Tag</value>
  </data>
  <data name="FileName" xml:space="preserve">
    <value>Dateiname</value>
  </data>
  <data name="FilterOperation_Contains" xml:space="preserve">
    <value>enthält</value>
  </data>
  <data name="FilterOperation_DistinctTo" xml:space="preserve">
    <value>distinct</value>
  </data>
  <data name="FilterOperation_EndsWith" xml:space="preserve">
    <value>endet mit</value>
  </data>
  <data name="FilterOperation_EqualTo" xml:space="preserve">
    <value>gleich</value>
  </data>
  <data name="FilterOperation_GreaterThan" xml:space="preserve">
    <value>größer als</value>
  </data>
  <data name="FilterOperation_GreaterThanOrEqual" xml:space="preserve">
    <value>größer als oder gleich</value>
  </data>
  <data name="FilterOperation_LessThan" xml:space="preserve">
    <value>weniger als</value>
  </data>
  <data name="FilterOperation_LessThanOrEqual" xml:space="preserve">
    <value>kleiner oder gleich</value>
  </data>
  <data name="FilterOperation_Like" xml:space="preserve">
    <value>wie</value>
  </data>
  <data name="FilterOperation_StartsWith" xml:space="preserve">
    <value>beginnt mit</value>
  </data>
  <data name="Have0Decimals" xml:space="preserve">
    <value>haben Sie {0} decimal</value>
  </data>
  <data name="HaveANumberOfElements01" xml:space="preserve">
    <value>haben Sie eine Reihe von Elementen {0} {1}</value>
  </data>
  <data name="HaveAPrecisionOf" xml:space="preserve">
    <value>haben Sie eine Genauigkeit von </value>
  </data>
  <data name="HaveBetween0And1Characters" xml:space="preserve">
    <value>zwischen Sie {0} und {1} Zeichen</value>
  </data>
  <data name="HaveMaximun0Characters" xml:space="preserve">
    <value>Maximun {0} Zeichen haben</value>
  </data>
  <data name="HaveMinimum0Characters" xml:space="preserve">
    <value>haben Sie mindestens {0} Zeichen</value>
  </data>
  <data name="HaveNoRepeatedElements" xml:space="preserve">
    <value>haben Sie keine wiederholte Elemente</value>
  </data>
  <data name="HaveValid0Format" xml:space="preserve">
    <value>haben Sie eine gültige {0}-format</value>
  </data>
  <data name="Hour" xml:space="preserve">
    <value>Zeit</value>
  </data>
  <data name="IdentifiableEntity_ToStr" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="IdNotValid" xml:space="preserve">
    <value>ID ungültig</value>
  </data>
  <data name="ImmutableEntity_AllowChange" xml:space="preserve">
    <value>Ermöglichen ändern</value>
  </data>
  <data name="InvalidFormat" xml:space="preserve">
    <value>Ungültiges format</value>
  </data>
  <data name="LockeableEntity_Locked" xml:space="preserve">
    <value>Blockiert</value>
  </data>
  <data name="Lowercase" xml:space="preserve">
    <value>Kleinbuchstaben</value>
  </data>
  <data name="Millisecond" xml:space="preserve">
    <value>Millisekunde</value>
  </data>
  <data name="Minute" xml:space="preserve">
    <value>Minute</value>
  </data>
  <data name="Month" xml:space="preserve">
    <value>Monat</value>
  </data>
  <data name="MonthStart" xml:space="preserve">
    <value>Monat Start </value>
  </data>
  <data name="MoreThanOneColumnNamed0" xml:space="preserve">
    <value>Mehr als eine Spalte mit dem Namen {0}</value>
  </data>
  <data name="MoreThanOneTokenWithKey0FoundOn1" xml:space="preserve">
    <value>Mehr als ein Token mit Schlüssel {0} gefunden am {1}</value>
  </data>
  <data name="New" xml:space="preserve">
    <value>Neu</value>
  </data>
  <data name="Of" xml:space="preserve">
    <value> der </value>
  </data>
  <data name="OrBeNull" xml:space="preserve">
    <value>oder null sein</value>
  </data>
  <data name="Second" xml:space="preserve">
    <value>Sekunde</value>
  </data>
  <data name="State0NotRegisteredInStateValidator" xml:space="preserve">
    <value>Status {0} nicht registriert in StateValidator</value>
  </data>
  <data name="Telephone" xml:space="preserve">
    <value>Telefon</value>
  </data>
  <data name="TheLenghtOf0HasToBeEqualTo0" xml:space="preserve">
    <value>Die Länge von {{0}} hat gleich {0} sein</value>
  </data>
  <data name="TheLengthOf0HasToBeGreaterOrEqualTo0" xml:space="preserve">
    <value>Die Länge von {{0}} muss größer als oder gleich {0}</value>
  </data>
  <data name="TheLengthOf0HasToBeLesserOrEqualTo0" xml:space="preserve">
    <value>Die Länge von {{0}} muss kleiner als oder gleich {0} sein</value>
  </data>
  <data name="TheNumberOfElementsOf0HasToBe01" xml:space="preserve">
    <value>Die Anzahl der Elemente von {{0}} hat zu {0} {1} werden</value>
  </data>
  <data name="Token0NotCompatibleWith1" xml:space="preserve">
    <value>Token {0} nicht kompatibel mit {1}</value>
  </data>
  <data name="TypeNotFound" xml:space="preserve">
    <value>Typ nicht gefunden</value>
  </data>
  <data name="Uppercase" xml:space="preserve">
    <value>Großbuchstaben</value>
  </data>
  <data name="Year" xml:space="preserve">
    <value>Jahr</value>
  </data>
</root>