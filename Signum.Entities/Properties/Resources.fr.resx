<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="_0As1" xml:space="preserve">
    <value>({0} comme {1})</value>
  </data>
  <data name="_0DoesNotHaveAValid0Format" xml:space="preserve">
    <value>{{0}} n'a pas un format {0} valide</value>
  </data>
  <data name="_0HasMoreThan0DecimalPlaces" xml:space="preserve">
    <value>{{0}} a plus {0} places décimales</value>
  </data>
  <data name="_0HasNoCorrectFormat" xml:space="preserve">
    <value>{0} n'a pas un format correct</value>
  </data>
  <data name="_0HasSomeRepeatedElements0" xml:space="preserve">
    <value>{{0}} contient des répétitions: {0}</value>
  </data>
  <data name="_0HasToBe0Than1" xml:space="preserve">
    <value>{{0}} doit être {0} {1}</value>
  </data>
  <data name="_0HasToBeBetween0And1" xml:space="preserve">
    <value>{{0}} Doit être entre {0} et {1}</value>
  </data>
  <data name="_0HasToBeLowercase" xml:space="preserve">
    <value>{0} doit être en minuscule</value>
  </data>
  <data name="_0HasToBeUppercase" xml:space="preserve">
    <value>{0} doit être en majuscule</value>
  </data>
  <data name="_0IsNecessaryOnState1" xml:space="preserve">
    <value>{0} est nécessaire en état {1}</value>
  </data>
  <data name="_0IsNotAllowedOnState1" xml:space="preserve">
    <value>{0} n'est pas permis en état {1}</value>
  </data>
  <data name="_0IsNotAValidIdentifier" xml:space="preserve">
    <value>'{0}' n'est pas un identifiant valide</value>
  </data>
  <data name="And" xml:space="preserve">
    <value> et </value>
  </data>
  <data name="As0" xml:space="preserve">
    <value>Comme {0}</value>
  </data>
  <data name="Be" xml:space="preserve">
    <value>être </value>
  </data>
  <data name="BeBetween0And1" xml:space="preserve">
    <value>Doit être entre {0} et {1}</value>
  </data>
  <data name="BeNotNull" xml:space="preserve">
    <value>doit être non nul</value>
  </data>
  <data name="Column0NotFound" xml:space="preserve">
    <value>Colonne {0} pas trouvé</value>
  </data>
  <data name="ComparisonType_DistinctTo" xml:space="preserve">
    <value>distinctes de</value>
  </data>
  <data name="ComparisonType_EqualTo" xml:space="preserve">
    <value>Egale à</value>
  </data>
  <data name="ComparisonType_GreaterThan" xml:space="preserve">
    <value>Plus grande que</value>
  </data>
  <data name="ComparisonType_GreaterThanOrEqual" xml:space="preserve">
    <value>Plus grand que ou égal</value>
  </data>
  <data name="ComparisonType_LessThan" xml:space="preserve">
    <value>Plus petit que</value>
  </data>
  <data name="ComparisonType_LessThanOrEqual" xml:space="preserve">
    <value>Plus petit que ou égal</value>
  </data>
  <data name="Count" xml:space="preserve">
    <value>Compte</value>
  </data>
  <data name="Day" xml:space="preserve">
    <value>Jour</value>
  </data>
  <data name="FileName" xml:space="preserve">
    <value>Nom de fichier</value>
  </data>
  <data name="FilterOperation_Contains" xml:space="preserve">
    <value>Contient</value>
  </data>
  <data name="FilterOperation_DistinctTo" xml:space="preserve">
    <value>Distinct de</value>
  </data>
  <data name="FilterOperation_EndsWith" xml:space="preserve">
    <value>Termine avec</value>
  </data>
  <data name="FilterOperation_EqualTo" xml:space="preserve">
    <value>Egal à</value>
  </data>
  <data name="FilterOperation_GreaterThan" xml:space="preserve">
    <value>Plus grand que</value>
  </data>
  <data name="FilterOperation_GreaterThanOrEqual" xml:space="preserve">
    <value>Plus grand que ou égal</value>
  </data>
  <data name="FilterOperation_LessThan" xml:space="preserve">
    <value>Plus petit que</value>
  </data>
  <data name="FilterOperation_LessThanOrEqual" xml:space="preserve">
    <value>Plus petit que ou égal</value>
  </data>
  <data name="FilterOperation_Like" xml:space="preserve">
    <value>like</value>
  </data>
  <data name="FilterOperation_StartsWith" xml:space="preserve">
    <value>Débute avec</value>
  </data>
  <data name="Have0Decimals" xml:space="preserve">
    <value>A {0} décimales</value>
  </data>
  <data name="HaveANumberOfElements01" xml:space="preserve">
    <value>A nombre d'éléments{0} {1}</value>
  </data>
  <data name="HaveAPrecisionOf" xml:space="preserve">
    <value>A une précision </value>
  </data>
  <data name="HaveBetween0And1Characters" xml:space="preserve">
    <value>A entre {0} et {1} caractère</value>
  </data>
  <data name="HaveMaximun0Characters" xml:space="preserve">
    <value>A maximum {0}caractères</value>
  </data>
  <data name="HaveMinimum0Characters" xml:space="preserve">
    <value>A minimum {0} caractères</value>
  </data>
  <data name="HaveNoRepeatedElements" xml:space="preserve">
    <value>N'a pas d'éléments répétés</value>
  </data>
  <data name="HaveValid0Format" xml:space="preserve">
    <value>A un format {0} valide</value>
  </data>
  <data name="Hour" xml:space="preserve">
    <value>Heur</value>
  </data>
  <data name="IdentifiableEntity_ToStr" xml:space="preserve">
    <value>Texte</value>
  </data>
  <data name="IdNotValid" xml:space="preserve">
    <value>Id invalide</value>
  </data>
  <data name="ImmutableEntity_AllowChange" xml:space="preserve">
    <value>Accepter changements</value>
  </data>
  <data name="InvalidFormat" xml:space="preserve">
    <value>Format Invalide</value>
  </data>
  <data name="LockeableEntity_Locked" xml:space="preserve">
    <value>Vérouillé</value>
  </data>
  <data name="Lowercase" xml:space="preserve">
    <value>minuscule</value>
  </data>
  <data name="Millisecond" xml:space="preserve">
    <value>Milliseconde</value>
  </data>
  <data name="Minute" xml:space="preserve">
    <value>Minute</value>
  </data>
  <data name="Month" xml:space="preserve">
    <value>Mois</value>
  </data>
  <data name="MoreThanOneColumnNamed0" xml:space="preserve">
    <value>Plus d'une colonne est nommée {0}</value>
  </data>
  <data name="MoreThanOneTokenWithKey0FoundOn1" xml:space="preserve">
    <value>Plus d'une saisie avec touche {0} trouvé dans {1}</value>
  </data>
  <data name="New" xml:space="preserve">
    <value>Nouveau</value>
  </data>
  <data name="Of" xml:space="preserve">
    <value> de </value>
  </data>
  <data name="OrBeNull" xml:space="preserve">
    <value>ou doit être nul</value>
  </data>
  <data name="Second" xml:space="preserve">
    <value>Seconde</value>
  </data>
  <data name="State0NotRegisteredInStateValidator" xml:space="preserve">
    <value>Etat {0} n'est pas enrigistré dans le StateValidator</value>
  </data>
  <data name="Telephone" xml:space="preserve">
    <value>Telephone</value>
  </data>
  <data name="TheLenghtOf0HasToBeEqualTo0" xml:space="preserve">
    <value>La longueur de {{0}} doit être égal à {0}</value>
  </data>
  <data name="TheLengthOf0HasToBeGreaterOrEqualTo0" xml:space="preserve">
    <value>La longueur de{{0}} doit être plus grand ou égal à{0}</value>
  </data>
  <data name="TheLengthOf0HasToBeLesserOrEqualTo0" xml:space="preserve">
    <value>La longueur de {{0}} doit être moins ou égal à {0}</value>
  </data>
  <data name="TheNumberOfElementsOf0HasToBe01" xml:space="preserve">
    <value>Le nombre d'éléments de {{0}} doit être de {0} {1}</value>
  </data>
  <data name="Token0NotCompatibleWith1" xml:space="preserve">
    <value>saisie {0} n'est pas compatible {1}</value>
  </data>
  <data name="TypeNotFound" xml:space="preserve">
    <value>Type introuvé</value>
  </data>
  <data name="Uppercase" xml:space="preserve">
    <value>minuscule</value>
  </data>
  <data name="Year" xml:space="preserve">
    <value>Année</value>
  </data>
  <data name="MonthStart" xml:space="preserve">
    <value>Début de mois </value>
  </data>
  <data name="_0IsNotAllowed" xml:space="preserve">
    <value>{0} n'est pas autorisée</value>
  </data>
  <data name="_0IsNecessary" xml:space="preserve">
    <value>{0} est nécessaire</value>
  </data>
  <data name="Date" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="_0IsNotSet" xml:space="preserve">
    <value>Champ {0} non établie</value>
  </data>
</root>