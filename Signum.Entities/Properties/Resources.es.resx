<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="HaveANumberOfElements01" xml:space="preserve">
    <value>have a number of elements {0} {1}</value>
  </data>
  <data name="QueryUtilsFindImplementationsCallbackNotSet" xml:space="preserve">
    <value>QueryUtils.FindImplementations callback no establecida</value>
  </data>
  <data name="As0" xml:space="preserve">
    <value>As {0}</value>
  </data>
  <data name="Year" xml:space="preserve">
    <value>Año</value>
  </data>
  <data name="Month" xml:space="preserve">
    <value>Mes</value>
  </data>
  <data name="Day" xml:space="preserve">
    <value>Dia</value>
  </data>
  <data name="Hour" xml:space="preserve">
    <value>Hora</value>
  </data>
  <data name="Minute" xml:space="preserve">
    <value>Minuto</value>
  </data>
  <data name="Second" xml:space="preserve">
    <value>Segundo</value>
  </data>
  <data name="Millisecond" xml:space="preserve">
    <value>Milisegundo</value>
  </data>
  <data name="TheLengthOf0HasToBeLesserOrEqualTo0" xml:space="preserve">
    <value>La longitud de {{0}} ha de ser menor o igual a {0}</value>
  </data>
  <data name="_0IsNewAndHasNoId" xml:space="preserve">
    <value>'{0}' es nueva y no tiene Id</value>
  </data>
  <data name="TheLiteIsPointingToANewEntityAndHasNoIdYet" xml:space="preserve">
    <value>El Lite apunta a una entidad nueva que aún no tiene Id</value>
  </data>
  <data name="PropertyShouldBeAnExpressionAccessingAProperty" xml:space="preserve">
    <value>property debe ser una expression de acceso a una propiedad</value>
  </data>
  <data name="BeNotNull" xml:space="preserve">
    <value>ser no nulo</value>
  </data>
  <data name="Have0Decimals" xml:space="preserve">
    <value>tener {0} decimales</value>
  </data>
  <data name="BeBetween0And1" xml:space="preserve">
    <value>estar entre {0} y {1}</value>
  </data>
  <data name="TheNumberOfElementsHasToBe01" xml:space="preserve">
    <value>El numero de elementos debe ser {0} {1}</value>
  </data>
  <data name="And" xml:space="preserve">
    <value> y </value>
  </data>
  <data name="HaveBetween0And1Characters" xml:space="preserve">
    <value>tener entre {0} y {1} caracteres</value>
  </data>
  <data name="HaveMinimum0Characters" xml:space="preserve">
    <value>tener mínimo {0} caracteres</value>
  </data>
  <data name="HaveMaximun0Characters" xml:space="preserve">
    <value>tener máximo {0} caracteres</value>
  </data>
  <data name="_0IsNotAllowedOnState1" xml:space="preserve">
    <value>{0} no está permitido en estado  {1}</value>
  </data>
  <data name="_0IsNecessaryOnState1" xml:space="preserve">
    <value>{0} es necesario en estado {1}</value>
  </data>
  <data name="AttemptToSaveANotNewModifiedImmutableEntity" xml:space="preserve">
    <value>Se ha intentado guardad una ImmutableEntity modificada y no nueva</value>
  </data>
  <data name="DifferentInstancesOfTheSameEntity1HaveBeenFound2" xml:space="preserve">
    <value>Se han encontrado {0} instancias diferentes de la misma entidad ({1}):
{2}</value>
  </data>
  <data name="_0DoesNotHaveAValid0Format" xml:space="preserve">
    <value>{{0}} no tiene formato de {0} correcto</value>
  </data>
  <data name="FilterOperation_GreaterThanOrEqual" xml:space="preserve">
    <value>mayor o igual que</value>
  </data>
  <data name="FilterOperation_Contains" xml:space="preserve">
    <value>contiene</value>
  </data>
  <data name="FilterOperation_EndsWith" xml:space="preserve">
    <value>acaba por</value>
  </data>
  <data name="FilterOperation_Like" xml:space="preserve">
    <value>like</value>
  </data>
  <data name="FilterOperation_StartsWith" xml:space="preserve">
    <value>empieza por</value>
  </data>
  <data name="NewEntitiesAreNotAllowed" xml:space="preserve">
    <value>No se puede establecer una entidad nueva</value>
  </data>
  <data name="TypeIsNotSmallerThan" xml:space="preserve">
    <value>El tipo {0} no es menor que {1}</value>
  </data>
  <data name="EntitiesDoNotMatch" xml:space="preserve">
    <value>La entidad no coincide con el Lite</value>
  </data>
  <data name="RemovingEntityNotAllowedInNewLazies" xml:space="preserve">
    <value>No se puede eliminar la entidad a un Lite sin id</value>
  </data>
  <data name="ToLiteLightNotAllowedForNewEntities" xml:space="preserve">
    <value>Sólo se permite ToLiteLight para Entidades con Id</value>
  </data>
  <data name="_0NotSupported" xml:space="preserve">
    <value>{0} no soportado</value>
  </data>
  <data name="FieldForPropertyNotFound" xml:space="preserve">
    <value>No se ha encontrado el campo correspondiente para la propiedad {0}</value>
  </data>
  <data name="OnlyOneArgumentAllowed" xml:space="preserve">
    <value>Debe tratarse de un metodo extensional de un solo argumento</value>
  </data>
  <data name="New" xml:space="preserve">
    <value>Nuevo</value>
  </data>
  <data name="Property0HasNoValue" xml:space="preserve">
    <value>La propiedad {0} no tiene un valor</value>
  </data>
  <data name="TheLengthOf0HasToBeGreaterOrEqualTo0" xml:space="preserve">
    <value>La longitud de {{0}} ha de ser mayor o igual a {0}</value>
  </data>
  <data name="_0HasNoCorrectFormat" xml:space="preserve">
    <value>{0} no tiene el formato correcto</value>
  </data>
  <data name="_0HasToBe0Than1" xml:space="preserve">
    <value>{{0}} ha de ser {0} {1}</value>
  </data>
  <data name="TheNumberOfElementsOf0HasToBe01" xml:space="preserve">
    <value>El número de elementos en {{0}} ha de ser {0} {1}</value>
  </data>
  <data name="_0HasHoursMinutesAndSeconds" xml:space="preserve">
    <value>{0} tiene horas minutos y segundos</value>
  </data>
  <data name="_0HasToBeUppercase" xml:space="preserve">
    <value>{0} debe estar todo en mayúsculas</value>
  </data>
  <data name="_0HasToBeLowercase" xml:space="preserve">
    <value>{0} debe estar todo en minúsculas</value>
  </data>
  <data name="_0DoesNotInheritFromIdentifiableEntity" xml:space="preserve">
    <value>{0} no hereda de IdentifiableEntity</value>
  </data>
  <data name="FilterOperation_DistinctTo" xml:space="preserve">
    <value>distinto de</value>
  </data>
  <data name="FilterOperation_EqualTo" xml:space="preserve">
    <value>igual a</value>
  </data>
  <data name="FilterOperation_GreaterThan" xml:space="preserve">
    <value>mayor que</value>
  </data>
  <data name="FilterOperation_LessThan" xml:space="preserve">
    <value>menor que</value>
  </data>
  <data name="FilterOperation_LessThanOrEqual" xml:space="preserve">
    <value>menor o igual que</value>
  </data>
  <data name="Type0NotSupported" xml:space="preserve">
    <value>Tipo no soportado {0}</value>
  </data>
  <data name="TheLenghtOf0HasToBeEqualTo0" xml:space="preserve">
    <value>La longitud de {{0}} ha de ser {0}</value>
  </data>
  <data name="_0HasToBeBetween0And1" xml:space="preserve">
    <value>{{0}} debe estar entre {0} y {1}</value>
  </data>
  <data name="_0HasMoreThan0DecimalPlaces" xml:space="preserve">
    <value>{{0}} tiene mas de  {0} decimales</value>
  </data>
  <data name="LockedModificationException" xml:space="preserve">
    <value>Modificación no permitida: el objeto está bloqueado</value>
  </data>
  <data name="FileName" xml:space="preserve">
    <value>Nombre de archivo</value>
  </data>
  <data name="Telephone" xml:space="preserve">
    <value>Teléfono</value>
  </data>
  <data name="_0HasSomeRepeatedElements0" xml:space="preserve">
    <value>{{0}} tiene algunos elementos repetidos: {0}</value>
  </data>
  <data name="AttemptToModify0WhenTheEntityIsNotNew" xml:space="preserve">
    <value>Se ha intentado modificar {0} cuando la entidad no es nueva</value>
  </data>
  <data name="ComparisonType_DistinctTo" xml:space="preserve">
    <value>distinto a</value>
  </data>
  <data name="ComparisonType_EqualTo" xml:space="preserve">
    <value>igual a</value>
  </data>
  <data name="ComparisonType_GreaterThan" xml:space="preserve">
    <value>mayor que</value>
  </data>
  <data name="ComparisonType_GreaterThanOrEqual" xml:space="preserve">
    <value>mayor o igual que</value>
  </data>
  <data name="ComparisonType_LessThan" xml:space="preserve">
    <value>menor que</value>
  </data>
  <data name="ComparisonType_LessThanOrEqual" xml:space="preserve">
    <value>menor o igual que</value>
  </data>
  <data name="LockeableEntity_Locked" xml:space="preserve">
    <value>Bloqueado</value>
  </data>
  <data name="OrBeNull" xml:space="preserve">
    <value>o ser nulo</value>
  </data>
  <data name="HaveNoRepeatedElements" xml:space="preserve">
    <value>no debe tener elementos repetidos</value>
  </data>
  <data name="HaveValid0Format" xml:space="preserve">
    <value>debe tener un formato {0} válido</value>
  </data>
  <data name="HaveNoTimePart" xml:space="preserve">
    <value>no tener horas minutos y segundos</value>
  </data>
  <data name="Be" xml:space="preserve">
    <value>ser </value>
  </data>
  <data name="TheLite0IsNotLoadedUseDatabaseRetrieveOrConsiderRewritingYourQuery" xml:space="preserve">
    <value>El Lite {0} no está cargado, usa Database.Retrieve o considera reescribir tu query</value>
  </data>
  <data name="IdentifiableEntity_ToStr" xml:space="preserve">
    <value>[Texto]</value>
  </data>
  <data name="Count" xml:space="preserve">
    <value>[Num]</value>
  </data>
</root>