<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="vwEjecutorClientexNombreCliente" xml:space="preserve">
    <value>CREATE VIEW    vwEjecutorClientexNombreCliente as SELECT     dbo.tlEjecutoresDeClienteDN.ID, dbo.tlClientedeFachadaDN.Nombre, dbo.tlEjecutoresDeClienteDN.Baja
FROM         dbo.tlEjecutoresDeClienteDN INNER JOIN
                      dbo.tlClientedeFachadaDN ON dbo.tlEjecutoresDeClienteDN.idClientedeFachada = dbo.tlClientedeFachadaDN.ID</value>
  </data>
  <data name="vwEjecutoresCleintexVmxVc" xml:space="preserve">
    <value>create view vwEjecutoresCleintexVmxVc as SELECT     dbo.tlVcEjecutorDeVerboEnClienteDN.ID AS idVEj, dbo.tlVerboDN.ID AS idv, dbo.tlVerboDN.Nombre, dbo.tlVinculoMetodoDN.ID AS idvm, 
                      dbo.tlVinculoMetodoDN.NombreMetodo, dbo.tlVinculoClaseDN.ID AS idvc, dbo.tlVinculoClaseDN.NombreClase
FROM         dbo.tlVcEjecutorDeVerboEnClienteDN INNER JOIN
                      dbo.tlVerboDN ON dbo.tlVcEjecutorDeVerboEnClienteDN.idVerbo = dbo.tlVerboDN.ID INNER JOIN
                      dbo.tlVinculoMetodoDN ON dbo.tlVcEjecutorDeVerboEnClienteDN.idVinculoMetodo = dbo.tlVinculoMetodoDN.ID INNER JOIN
                      dbo.tlVinculoClaseDN ON dbo.tlVinculoMetodoDN.idVinculoClase = dbo.tlVinculoClaseDN.ID</value>
  </data>
  <data name="vwOperacionesRealizadasActivas" xml:space="preserve">
    <value>CREATE VIEW    vwOperacionesRealizadasActivas as SELECT     dbo.tlOperacionRealizadaDN.ID AS idOperacionRealizadaDestino, dbo.vwTransicionesxTipoDN.NombreClaseOrigen, 
                      dbo.vwTransicionesxTipoDN.TipoTransicion, dbo.tlOperacionRealizadaDN.Baja, dbo.tlHEDN.IdEntidadReferida, dbo.tlOperacionDN.Nombre, 
                      dbo.tlHEDN.GUIDReferida
FROM         dbo.tlTransicionRealizadaDN INNER JOIN
                      dbo.vwTransicionesxTipoDN INNER JOIN
                      dbo.tlTransicionDN ON dbo.vwTransicionesxTipoDN.ID = dbo.tlTransicionDN.ID ON 
                      dbo.tlTransicionRealizadaDN.idTransicion = dbo.tlTransicionDN.ID INNER JOIN
                      dbo.tlOperacionDN INNER JOIN
                      dbo.tlOperacionRealizadaDN ON dbo.tlOperacionDN.ID = dbo.tlOperacionRealizadaDN.idOperacion ON 
                      dbo.tlTransicionRealizadaDN.idOperacionRealizadaOrigen = dbo.tlOperacionRealizadaDN.ID INNER JOIN
                      dbo.tlHEDN ON dbo.tlOperacionRealizadaDN.idHuellaOI = dbo.tlHEDN.GUID</value>
  </data>
  <data name="vwProcesosTransicionesOrDes" xml:space="preserve">
    <value>Create VIEW   vwProcesosTransicionesOrDes  as   SELECT     dbo.tlTransicionRealizadaDN.ID, dbo.tlOperacionRealizadaDN.ID AS OpoId, dbo.tlOperacionDN.Nombre AS OpoNOmbre, 
                      dbo.tlOperacionRealizadaDN.Periodo_FInicio AS OpoFI, dbo.tlOperacionRealizadaDN.Periodo_FFinal AS OpoFF, 
                      tlOperacionRealizadaDN_1.ID AS OpdID, tlOperacionDN_1.Nombre AS OpdNombre, tlOperacionRealizadaDN_1.Periodo_FInicio AS OpdFI, 
                      tlOperacionRealizadaDN_1.Periodo_FFinal AS OpfFF, dbo.tlOperacionRealizadaDN.RutaSubordinada AS OpoRS, 
                      tlOperacionRealizadaDN_1.RutaSubordinada AS OpdRS
FROM         dbo.tlTransicionRealizadaDN INNER JOIN
                      dbo.tlOperacionRealizadaDN ON dbo.tlTransicionRealizadaDN.idOperacionRealizadaOrigen = dbo.tlOperacionRealizadaDN.ID INNER JOIN
                      dbo.tlOperacionDN ON dbo.tlOperacionRealizadaDN.idOperacion = dbo.tlOperacionDN.ID INNER JOIN
                      dbo.tlOperacionRealizadaDN AS tlOperacionRealizadaDN_1 ON 
                      dbo.tlTransicionRealizadaDN.idOperacionRealizadaDestino = tlOperacionRealizadaDN_1.ID INNER JOIN
                      dbo.tlOperacionDN AS tlOperacionDN_1 ON tlOperacionRealizadaDN_1.idOperacion = tlOperacionDN_1.ID</value>
  </data>
  <data name="vwProcesosTrOprOrigenOprDestino" xml:space="preserve">
    <value>Create View vwProcesosTrOprOrigenOprDestino as   SELECT     dbo.tlTransicionRealizadaDN.ID, dbo.tlOperacionRealizadaDN.RutaSubordinada AS opoRS, 
                      tlOperacionRealizadaDN_1.RutaSubordinada AS opdRS
FROM         dbo.tlOperacionRealizadaDN INNER JOIN
                      dbo.tlTransicionRealizadaDN ON dbo.tlOperacionRealizadaDN.ID = dbo.tlTransicionRealizadaDN.idOperacionRealizadaOrigen INNER JOIN
                      dbo.tlOperacionRealizadaDN AS tlOperacionRealizadaDN_1 ON 
                      dbo.tlTransicionRealizadaDN.idOperacionRealizadaDestino = tlOperacionRealizadaDN_1.ID</value>
  </data>
  <data name="vwTransicionesxTipoDN" xml:space="preserve">
    <value>CREATE VIEW    vwTransicionesxTipoDN as  SELECT     dbo.tlTransicionDN.ID, dbo.tlTransicionDN.TipoTransicion, dbo.tlTransicionDN.Baja, dbo.tlTransicionDN.idOperacionOrigen, 
                      dbo.tlTransicionDN.idOperacionDestino, dbo.tlOperacionDN.Nombre AS NombreOpOrigen, tlOperacionDN_1.Nombre AS NombreOpDestino, 
                      dbo.tlVinculoClaseDN.NombreClase AS NombreClaseOrigen, tlVinculoClaseDN_1.NombreClase AS NombreClaseDestino
FROM         dbo.tlVinculoClaseDN INNER JOIN
                      dbo.trtlOperacionDNColDNAceptadasXtlVinculoClaseDN ON 
                      dbo.tlVinculoClaseDN.ID = dbo.trtlOperacionDNColDNAceptadasXtlVinculoClaseDN.idptlVinculoClaseDN INNER JOIN
                      dbo.tlOperacionDN ON dbo.trtlOperacionDNColDNAceptadasXtlVinculoClaseDN.idttlOperacionDN = dbo.tlOperacionDN.ID INNER JOIN
                      dbo.tlTransicionDN ON dbo.tlOperacionDN.ID = dbo.tlTransicionDN.idOperacionOrigen INNER JOIN
                      dbo.tlOperacionDN AS tlOperacionDN_1 ON dbo.tlTransicionDN.idOperacionDestino = tlOperacionDN_1.ID INNER JOIN
                      dbo.trtlOperacionDNColDNAceptadasXtlVinculoClaseDN AS trtlOperacionDNColDNAceptadasXtlVinculoClaseDN_1 ON 
                      tlOperacionDN_1.ID = trtlOperacionDNColDNAceptadasXtlVinculoClaseDN_1.idttlOperacionDN INNER JOIN
                      dbo.tlVinculoClaseDN AS tlVinculoClaseDN_1 ON trtlOperacionDNColDNAceptadasXtlVinculoClaseDN_1.idptlVinculoClaseDN = tlVinculoClaseDN_1.ID</value>
  </data>
  <data name="vwUltimasOperacionesSubordinadas" xml:space="preserve">
    <value>CREATE VIEW vwUltimasOperacionesSubordinadas as SELECT     dbo.tlHEDN.IdEntidadReferida AS ID, dbo.tlOperacionRealizadaDN.ID AS idOPR, dbo.tlOperacionRealizadaDN.idOperacion, 
                      dbo.tlOperacionRealizadaDN.Periodo_FInicio, dbo.tlOperacionRealizadaDN.Periodo_FFinal, dbo.tlTransicionDN.TipoTransicion, 
                      dbo.tlOperacionDN.ID AS idOperacionPosible, dbo.tlOperacionDN.Nombre, dbo.tlHEDN.GUIDReferida, 
                      dbo.tlHEDN.TipoEntidadReferidaFullName
FROM         dbo.tlOperacionRealizadaDN INNER JOIN
                      dbo.tlTransicionDN ON dbo.tlOperacionRealizadaDN.idOperacion = dbo.tlTransicionDN.idOperacionOrigen INNER JOIN
                      dbo.tlOperacionDN ON dbo.tlTransicionDN.idOperacionDestino = dbo.tlOperacionDN.ID INNER JOIN
                      dbo.tlHEDN ON dbo.tlOperacionRealizadaDN.idHuellaOI = dbo.tlHEDN.GUID LEFT OUTER JOIN
                      dbo.tlTransicionRealizadaDN ON dbo.tlTransicionDN.ID = dbo.tlTransicionRealizadaDN.idTransicion AND 
                      dbo.tlOperacionRealizadaDN.ID = dbo.tlTransicionRealizadaDN.idOperacionRealizadaOrigen
WHERE     (dbo.tlTransicionDN.TipoTransicion = 1) AND (dbo.tlTransicionRealizadaDN.idOperacionRealizadaDestino IS NULL)</value>
  </data>
  <data name="vwUltimasOperacionesTotales" xml:space="preserve">
    <value>Create view vwUltimasOperacionesTotales as SELECT     ID, idOPR, idOperacion, Periodo_FInicio, Periodo_FFinal, TipoTransicion, idOperacionPosible, Nombre, GUIDReferida, 
                      TipoEntidadReferidaFullName
FROM         vwUltimasOperacionesTRNormal
UNION
SELECT     ID, idOPR, idOperacion, Periodo_FInicio, Periodo_FFinal, TipoTransicion, idOperacionPosible, Nombre, GUIDReferida, 
                      TipoEntidadReferidaFullName
FROM         vwUltimasOperacionesSubordinadas</value>
  </data>
  <data name="vwUltimasOperacionesTRNormal" xml:space="preserve">
    <value>CREATE VIEW vwUltimasOperacionesTRNormal as SELECT     dbo.tlHEDN.IdEntidadReferida AS ID, dbo.tlOperacionRealizadaDN.ID AS idOPR, dbo.tlOperacionRealizadaDN.idOperacion, 
                      dbo.tlOperacionRealizadaDN.Periodo_FInicio, dbo.tlOperacionRealizadaDN.Periodo_FFinal, dbo.tlTransicionDN.TipoTransicion, 
                      dbo.tlOperacionDN.ID AS idOperacionPosible, dbo.tlOperacionDN.Nombre, dbo.tlHEDN.GUIDReferida, 
                      dbo.tlHEDN.TipoEntidadReferidaFullName
FROM         dbo.tlOperacionDN INNER JOIN
                      dbo.tlOperacionRealizadaDN INNER JOIN
                      dbo.tlTransicionDN ON dbo.tlOperacionRealizadaDN.idOperacion = dbo.tlTransicionDN.idOperacionOrigen ON 
                      dbo.tlOperacionDN.ID = dbo.tlTransicionDN.idOperacionDestino INNER JOIN
                      dbo.tlHEDN ON dbo.tlOperacionRealizadaDN.idHuellaOI = dbo.tlHEDN.GUID LEFT OUTER JOIN
                      dbo.tlTransicionRealizadaDN ON dbo.tlOperacionRealizadaDN.ID = dbo.tlTransicionRealizadaDN.idOperacionRealizadaOrigen
WHERE     (dbo.tlTransicionRealizadaDN.idOperacionRealizadaOrigen IS NULL) AND (dbo.tlOperacionRealizadaDN.Periodo_FFinal IS NOT NULL)</value>
  </data>
</root>